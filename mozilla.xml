<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[All About Performance]]></title>
  <link href="http://taras.glek.net/atom.xml" rel="self"/>
  <link href="http://taras.glek.net/"/>
  <updated>2013-02-15T14:36:47-08:00</updated>
  <id>http://taras.glek.net/</id>
  <author>
    <name><![CDATA[Taras Glek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  
  <entry>
    <title type="html"><![CDATA[Is Planet Mozilla Obsolete for Technical Content?]]></title>
    <link href="http://taras.glek.net/blog/2013/02/15/is-planet-mozilla-obsolete/"/>
    <updated>2013-02-15T11:21:00-08:00</updated>
    <id>http://taras.glek.net/blog/2013/02/15/is-planet-mozilla-obsolete</id>
    <content type="html"><![CDATA[<h2>Good Old Days</h2>

<p>I have been remotely working at Mozilla for over 6 years. I like working remotely, but it poses some challenges. Early on I discovered that if I only show up at the HQ a couple times a year, most will people treat me as a stranger. That got old fast.</p>

<p>The problem is that it takes a lot of time time to get everybody up to speed on who you are (defined by what you work on). This means one&#8217;s work social circle is limited to people who you have frequent bugzilla/irc interactions with + random people who took the time to get to know a random coworker. One can imagine that introverts are not inclined to waste too much energy meeting new people.</p>

<p>The solution was simple: blog a lot. After a couple years of blogging I just had to say &#8220;I&#8217;m Taras&#8221; and a good proportion of the people would connect my face to (obscure static analysis at first) work they read about on <a href="http://planet.mozilla.org">planet</a>. This cut down my introduction overhead significantly. Planet Mozilla had a lot of blogs syndicated to it when I joined. I had a huge audience to introduce my work to.</p>

<p>In addition to creating awareness of my work, blogging about tough problems would occasionally result in helpful comments. People provided tips on static analysis, Windows APIs and even ran scary privileged software I wrote to help me gather data. Due to disproportionate (eg saving days to weeks of work) value of helpful comments I concluded that it&#8217;s worth spending a couple hours per blog post. Most blog comments might be <a href="http://davidwalsh.name/blog-comments">garbage</a>, but they are easy to ignore. Before I implemented <a href="https://wiki.mozilla.org/Telemetry">telemetry</a>, I was able to find performance extremes solely on blog feedback. Unlike privacy-sensitive telemetry data, blog comments came with email addresses and eager volunteers on the other end. I value comments a lot, it makes me sad when good bloggers disable comments.</p>

<p>To me Planet Mozilla was a great way to keep up with Mozilla technical affairs. We have a lot of smart people working on interesting problems at Mozilla. As a result of past planet experience, I ask every new person who joins the Performance team to get their blog syndicated to planet ASAP. Increasingly that feels like an unproductive suggestion.</p>

<h2>Present</h2>

<p>I do not have any data on this. However my feeling is that the volume of blog traffic on planet grew from barely-manageable in the early days to too much. Good technical content never constituted more than 10% of the planet posts. However as absolute blog traffic grew, it became harder to spot the good stuff. In addition to a lot of content being non-technical, in the last few years people started discussing their feelings about others and things got ugly.</p>

<p>I&#8217;m pretty sure the result is that there are fewer technical people reading planet than before(due to poor signal/noise ratio). Lack of audience means less incentive to blog (that and the fact that some bloggers are part of the audience that gave up on planet).</p>

<p>So what are we to do? Is planet obsolete for good technical content? Is there a new reddit/hackernews/twitter self-moderating solution for dealing with signal problems? Surely setting up a new planet is no longer considered state of the art for this.</p>

<p>I am sad to see a public resource like the planet get too big to remain useful with no clear successor.</p>

<p>ps. Sorry for adding to the non-technical noise.</p>
]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Snappy #50]]></title>
    <link href="http://taras.glek.net/blog/2013/01/28/snappy-number-50-misc-speedups/"/>
    <updated>2013-01-28T16:00:00-08:00</updated>
    <id>http://taras.glek.net/blog/2013/01/28/snappy-number-50-misc-speedups</id>
    <content type="html"><![CDATA[<h3>Graphics</h3>

<p>In some cases Direct2D-accelerated drawing is slower than the non-accelerated path. Jeff Muizelaar fixed a severe gradient &#8216;hang&#8217; in <a title="Avoid hitting D2D slow path when drawing radial gradients from css" href="https://bugzilla.mozilla.org/show_bug.cgi?id=823147">bug 823147</a>.</p>

<p>Avi Halachmi diagnosed a significant menu performance issue in <a title="Menu items slow to paint/respond after peeking their sub-menu popups" href="https://bugzilla.mozilla.org/show_bug.cgi?id=832641">bug 832641</a>, this was promptly fixed by Matt Woodrow.</p>

<h3>Misc Pauses</h3>

<p>Vladan Djeric <a href="https://blog.mozilla.org/vdjeric/2013/01/24/add-on-performance-problems/">blogged</a> about top main-thread SQL issues contributed by addons. Vladan also produced a <a href="http://people.mozilla.com/~vdjeric/DecJanHangs.txt">chromehang</a> report for last 2 months.</p>

<p>Ehsan Akhgari fixed a <em>chromehang</em> caused by leftover debug code: <a title="Multi-second hang during CollectNewLoadedModules" href="https://bugzilla.mozilla.org/show_bug.cgi?id=830765">bug 830765</a>.</p>

<p>Justin Lebar fixed an issue where telemetry memory reporting code was accidentally triggering expensive &#8216;release memory to OS&#8217; operations: <a title="Extremely long pause while collecting telemetry information on the main thread" href="https://bugzilla.mozilla.org/show_bug.cgi?id=789975">bug 789975</a>.</p>

<h3>Shutdown</h3>

<p>Sometimes Firefox takes a long time to shutdown. We also have a timer that regularly triggers cycle collection. Olli Pettay disabled this timer during shutdown in <a title="Timer based CC occurring on shutdown" href="https://bugzilla.mozilla.org/show_bug.cgi?id=822849">bug 822849</a>.</p>
]]></content>
  </entry>
  
  
  
  
  
  <entry>
    <title type="html"><![CDATA[Snappy #48: Now With Faster Shutdown]]></title>
    <link href="http://taras.glek.net/blog/2013/01/10/snappy-number-48-now-with-faster-shutdown/"/>
    <updated>2013-01-10T16:53:00-08:00</updated>
    <id>http://taras.glek.net/blog/2013/01/10/snappy-number-48-now-with-faster-shutdown</id>
    <content type="html"><![CDATA[<h3>Huge Shutdown Improvement</h3>

<p>After a couple weeks worth of telemetry data confirmed that Olli Pettay sped up shutdown by an epic >=30%: <a title="Don't run CC during shutdown" href="https://bugzilla.mozilla.org/show_bug.cgi?id=818739">bug 818739</a>, <a href="http://tinyurl.com/abo6uek">telemetry link</a>.</p>

<h3>Memory Management</h3>

<p>Olli and Andrew McCreight continued with reducing CC pauses:</p>

<ul>
<li><a title="Try to postpone triggering CC if we're in middle of GC handling" href="https://bugzilla.mozilla.org/show_bug.cgi?id=820378">bug 820378</a>: Delay CC if we&#8217;re in the middle of a GC, to allow async CC prep</li>
<li><a title="Improve CanSkipWrappedJS" href="https://bugzilla.mozilla.org/show_bug.cgi?id=827471">bug 827471</a>: Remove more wrapped JS from the CC graph</li>
<li><a title="[CC] don't add JSContexts that have no children to the cycle collector graph" href="https://bugzilla.mozilla.org/show_bug.cgi?id=705371">bug 705371</a>: Remove pointless JSContexts from the CC graph</li>
<li><a title="Mark the script of live nsXULPrototypeScript black during GC" href="https://bugzilla.mozilla.org/show_bug.cgi?id=785493">bug 785493</a>: Reduce size of steady state cycle collector graph by about 80%</li>
<li><a title="Add telemetry for prep work done for cycle collection" href="https://bugzilla.mozilla.org/show_bug.cgi?id=821371">bug 821371</a>: Include prep work in cycle collector pause time telemetry</li>
</ul>


<h3>Misc</h3>

<p>Vladan landed <a title="Move LocalStorage writes off the main thread" href="https://bugzilla.mozilla.org/show_bug.cgi?id=807021">bug 807021</a>. Firefox should now handle DOM Local Storage writes without janking.</p>

<h3>Startup</h3>

<p>David Teller made search service metadata loading/migration async: <a title="nsIBrowserSearchService should load metadata asynchronously" href="https://bugzilla.mozilla.org/show_bug.cgi?id=760036">bug 760036</a>. David also made session-store loading async: <a title="session file should be read on a background thread" href="https://bugzilla.mozilla.org/show_bug.cgi?id=532150">bug 532150</a>.</p>

<p>Aaron Klotz landed a telemetry probe to measure how often the &#8216;Firefox is running but not responding&#8217; dialog is encountered on attempted startup: <a title="telemetry on what proportion of attempted firefox startups result in 'firefox is running and not responding'" href="https://bugzilla.mozilla.org/show_bug.cgi?id=815418">bug 815418</a>. This will help us decide on whether (or when) to add functionality to kill unresponsive Firefox instances.</p>
]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Snappy: 2012 Summary]]></title>
    <link href="http://taras.glek.net/blog/2013/01/04/snappy-2012-summary/"/>
    <updated>2013-01-04T15:46:00-08:00</updated>
    <id>http://taras.glek.net/blog/2013/01/04/snappy-2012-summary</id>
    <content type="html"><![CDATA[<p>2012 was an exciting year for Snappy. Turning &#8216;make it go faster&#8217; into a set of measurements and corresponding bugs to fix was hard. We learned a lot.</p>

<p>I&#8217;d like to summarize some of the most memorable Snappy accomplishments.</p>

<p><em>Short version: Firefox is much more reponsive now.</em></p>

<!-- more -->


<h1>Snappy Tools</h1>

<p>Much of the year was spent on tooling for analyzing Firefox performance. <a href="https://addons.mozilla.org/en-us/thunderbird/addon/gecko-profiler/">Gecko profiler</a> is my favourite new tool. Telemetry chromehangs, evolution and slowsql are also great for settling arguments.</p>

<p>Many of the bugs below would not have gotten fixed without these tools.</p>

<h1>Cleaning up the Memory Collectors</h1>

<p>In the beginning of the year it was common to suffer long (200-700ms for me) garbage and cycle collection pauses. I now rarely see pauses over 20ms in these areas. I suspect these were the most laborious improvements of 2012: see the huge number of blocking bugs in <a title="Incremental GC" href="https://bugzilla.mozilla.org/show_bug.cgi?id=641025">bug 641025</a>, <a title="[meta] Don't add obviously live objects to the cycle collector graph" href="https://bugzilla.mozilla.org/show_bug.cgi?id=716598">bug 716598</a>.</p>

<h1>SQLite Misuse</h1>

<p>SQLite is a fine database, but it is much better at storing data robustly than accessing it efficiently. Firefox got nailed by the following footguns:</p>

<ul>
<li>overusing main-thread SQL queries</li>
<li>performing expensive background queries</li>
</ul>


<p>As if main-thread IO wasn&#8217;t bad enough, turns out SQLite does not like running queries in parallel. Mixing sync/async queries invites race conditions where sync queries can end up waiting for many minutes at a time (hanging the UI) while &#8220;background&#8221; maintenance queries complete. There were too many such fixes to list.</p>

<h3>DOM Local Storage Caching</h3>

<p>We ran into significant problems with Local Storage. In order conform to spec and not perform poorly, browsers are forced to maintain an in-memory cache (this is why Local Storage dominates in synthetic benchmarks: they are measuring memory bandwidth with no syscall, etc overhead).</p>

<ul>
<li>It became really popular in 2011-2012 despite a poor spec: main-thread reads and vagueness on when/whether data should hit disk.</li>
<li>Local Storage cache was causing LS to be written out too often: <a title="Reduce writes in current DOM Storage implementation" href="https://bugzilla.mozilla.org/show_bug.cgi?id=714964">bug 714964</a></li>
<li>Local Storage cache was written on main-thread. For paranoid amusement it was then read back in after every writeout: <a title="Move LocalStorage writes off the main thread" href="https://bugzilla.mozilla.org/show_bug.cgi?id=807021">bug 807021</a></li>
<li>For some some reason to do with how our DOM works there is a second level of caching so local storage can actually use up 2x more memory in RAM than it does on disk. As a result the Local Storage cache is slated for a complete rewrite in <a title="Rewrite and cleanup DOMStorage code" href="https://bugzilla.mozilla.org/show_bug.cgi?id=600307">bug 600307</a>.</li>
</ul>


<p>I should note, I made a mistake and attributed <a href="http://taras.glek.net/blog/2012/02/22/psa-dom-local-storage-considered-harmful/">too much blame</a> to the Local Storage API. I will blog on the exact extent of Local Storage badness once I have a chance to access the relevant telemetry data.</p>

<p>Surprisingly, the Local Storage caching layer was so bad that the underlying SQLite footguns did not get to play a role in this tragedy.</p>

<h1>Async IO</h1>

<p>For years people would argue on how patches should strive to use async APIs during patch review. Unfortunately even a little bit of sync IO has potential to cancel out the most elaborate async efforts.</p>

<p>We had no purely async storage APIs until recently. We now have one such API in <a href="http://dutherenverseauborddelatable.wordpress.com/2012/10/03/asynchronous-file-io-for-the-mozilla-platform/">OS.File</a>.</p>

<h1>UI Slowness</h1>

<p>The following sadness was fixed:</p>

<h3>Startup</h3>

<ul>
<li>Renaming directories with lots of files can take minutes on Windows: bad when it happens on startup: <a title="Disk cache seems to cause exceptionally slow startups(1min+)" href="https://bugzilla.mozilla.org/show_bug.cgi?id=701909">bug 701909</a>.</li>
<li>Firefox had a minor tendency to start loading webpages before UI is shown: <a title="Don't load homepage URI before first paint" href="https://bugzilla.mozilla.org/show_bug.cgi?id=756313">bug 756313</a>, <a title="Wait until chrome is painted before executing code not critical to making the initial window visible" href="https://bugzilla.mozilla.org/show_bug.cgi?id=715402">bug 715402</a>.</li>
<li>Q: What could be worse than loading pages before UI is shown? A: Executing synchronous proxy code: <a title="windows proxy discovery via WPAD needs caching" href="https://bugzilla.mozilla.org/show_bug.cgi?id=790370">bug 790370</a>, <a title="remove synchronous DNS resolution in nsSOCKSIOLayer.cpp" href="https://bugzilla.mozilla.org/show_bug.cgi?id=767159">bug 767159</a></li>
<li>Firefox insisted on doing network activity to verify some extension jars on startup: <a title="Certificate of a signed extension is validated on each startup" href="https://bugzilla.mozilla.org/show_bug.cgi?id=726125">bug 726125</a></li>
</ul>


<h3>General</h3>

<ul>
<li>Tab switching to some popular websites is roughly 10x faster now (too many bugs to list).</li>
<li>Firefox tended be unresponsive during large downloads: <a title="nsExternalAppHandler downloads files on the main thread" href="https://bugzilla.mozilla.org/show_bug.cgi?id=789932">bug 789932</a>.</li>
<li>In some situations hardware acceleration would slow down Firefox UI to a crawl: too many bugs to list here.</li>
</ul>


<h1>2013</h1>

<p>2012 was a good warm-up. We spent a substantial part of the year on tooling. If everything goes right, that should pay off in the coming year.</p>
]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Making pages load faster]]></title>
    <link href="http://taras.glek.net/blog/2012/12/24/making-pages-load-faster/"/>
    <updated>2012-12-24T21:44:00-08:00</updated>
    <id>http://taras.glek.net/blog/2012/12/24/making-pages-load-faster</id>
    <content type="html"><![CDATA[<p>I am not a web developer. I often learn about modern web dev tricks/trends by noticing how they impact overall Firefox performance. I prefer learning about perf topics from well-written blog posts. Bryan of Google page speed team <a href="http://calendar.perfplanet.com/2012/make-your-mobile-pages-render-in-under-one-second/">blogged</a> on optimizing pageload speeds on mobile. The advice is good, but I have two minor warnings about it.</p>

<p>Suggestion to use <code>requestAnimationFrame</code> to delay loading resources is a good one. There is a gotcha: if you do something expensive in the requestAnimationFrame handler, it&#8217;ll delay your first page draw (requestAnimationFrame fires as the browser prepares to paint. It&#8217;s an ok place to start network requests, etc). If you do something expensive, use a chained requestAnimationFrame. Firefox recently started using a similar trick to display the UI faster in <a title="Wait until chrome is painted before executing code not critical to making the initial window visible" href="https://bugzilla.mozilla.org/show_bug.cgi?id=715402">bug 715402</a>.</p>

<p>The suggestion to split up stylesheets is also good, but risky. I&#8217;ve seen this before, but I did not understand why websites sprinkled <code>&lt;link rel="stylesheet"&gt;</code> throughout the page bodies. This can significantly degrade pageload times by causing redundant page restyles and reflows. Reflows can take hundreds of milliseconds on slow mobile devices, doing them multiple times is bad. Make sure to run your pages through a <a href="http://anton.kovalyov.net/2012/12/17/firefox-profiler/">profiler</a> (or time the difference between relevant requestAnimationFrame callbacks). I saw a bad case of this in <a title="huffingtonpost loads up to 50% slower in Firefox than in opera" href="https://bugzilla.mozilla.org/show_bug.cgi?id=718864">bug 718864</a>.</p>
]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Snappy #45: The view from home]]></title>
    <link href="http://taras.glek.net/blog/2012/12/21/interesting-bugzilla-activity/"/>
    <updated>2012-12-21T12:09:00-08:00</updated>
    <id>http://taras.glek.net/blog/2012/12/21/interesting-bugzilla-activity</id>
    <content type="html"><![CDATA[<p>I&#8217;m out until January. However, I setup a <a href="http://taras.glek.net/blog/2012/12/17/hello-octopress/">new blog</a>, so why not test it with a snappy update.</p>

<p>Benoit Girard sped up shutdown with:</p>

<ul>
<li>not forcing startup cache flushes on shutdown: <a title="[Shutdown] Startup cache slows shutdown with < 10 sec uptime" href="https://bugzilla.mozilla.org/show_bug.cgi?id=816656">bug 816656</a>. This speeds up exiting browser soon after startup.</li>
<li><a title="[Shutdown] js::NukeCrossCompartmentWrappers takes up to 300ms on shutdown. Avoid doing it for optimized shutdown" href="https://bugzilla.mozilla.org/show_bug.cgi?id=818296">bug 818296</a>: [Shutdown] js::NukeCrossCompartmentWrappers takes up to 300ms on shutdown. Avoid doing it for optimized shutdown. This may significantly reduce our shutdown times. We are waiting on more telemetry data to confirm.</li>
</ul>


<p>Aaron Klotz made startup slightly faster by speeding up reading of some urlclassifier files in <a title="loading the two safebrowsing files is not as fast as it could be" href="https://bugzilla.mozilla.org/show_bug.cgi?id=810101">bug 810101</a>.</p>

<p>Vladimir Vukicevic landed <a title="requestAnimationFrame generates too short/long frames, especially at the beginning of animation" href="https://bugzilla.mozilla.org/show_bug.cgi?id=731974">bug 731974</a> which results in smoother browser animations and significantly improves the quality of tab-strip animations.</p>
]]></content>
  </entry>
  
  
  
  
  
  <entry>
    <title type="html"><![CDATA[Coping with Flash hangs]]></title>
    <link href="http://taras.glek.net/blog/2012/11/26/coping-with-flash-hangs/"/>
    <updated>2012-11-26T01:45:11-08:00</updated>
    <id>http://taras.glek.net/blog/2012/11/26/coping-with-flash-hangs</id>
    <content type="html"><![CDATA[<p>Blocking calls into the Flash plugin can temporarily hang Firefox. This is a problem because sometimes the user would be happy to kill the plugin to access their webpage and at other times it&#8217;s the only way to get certain flash apps/games to load. If you suffer from flash-related hangs see Aaron&#8217;s <a href="http://dblohm7.ca/blog/2012/11/22/plugin-hang-user-interface-for-firefox/">blog post</a> for some builds to try. He is working a new <a href="https://wiki.mozilla.org/Features/Firefox/Windows_Plugin_Hang_UI">feature </a>to provide an option to kill hanging flash instances.</p>
]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Snappy #44: Fixing tab switching in Vancouver]]></title>
    <link href="http://taras.glek.net/blog/2012/11/16/snappy-44-fixing-tab-switching-in-vancouver/"/>
    <updated>2012-11-16T10:06:41-08:00</updated>
    <id>http://taras.glek.net/blog/2012/11/16/snappy-44-fixing-tab-switching-in-vancouver</id>
    <content type="html"><![CDATA[<p>I joined our GFX+Layout teams for a workweek in Vancouver. Since profiling is most effective on slow machines, I brought along my trusty Acer  Aspire 722(slow 1.3ghz  CPU+ fast GPU) as my primary laptop. This hardware is great because the combination of a weak CPU + decent GPU means that if we accelerate things right the browser can perform quite well and if we don&#8217;t, things get really slow. (analogous situation exists when fast CPUs are matched with slow GPUs).</p>

<p>In the beginning of the week I quickly demoed menu lag, slow gmail tab switching(<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=811472">811472</a>). Later in the week we looked at problematic Facebook tab switch times (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=811474">811474</a>), Australis(see Matt&#8217;s <a href="http://matthew.noorenberghe.com/blog/2012/11/australis-tabs-where-are-you">post</a>) performance. By the end of the week tab switching improved by over 2x for both facebook and gmail. I don&#8217;t have exact figures because while we can measure general tab switch trends via telemetry, there isn&#8217;t a convenient way to do it on individual browsers yet. <em>Help wanted:</em> would be great if someone could do up a barebone addon to monitor tab switching in bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=812381">812381</a>, we&#8217;ll fill in the rest.</p>

<p>Jeff Muizelaar started out by speeding up checkbox drawing in bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=809603">809603</a><strong>.</strong> Matt Woodrow sped up gmail by tweaking how we use layers in bugs <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=811927">811927</a>,  <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=811570">811570</a>.</p>

<p>Matt made sure that we no longer draw layers with opacity of 0 in bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=811831">811831</a>. Turns rendering lots of invisible text can be expensive.</p>

<p>Workweeks are a more about communication than getting code landed, so it is impressive that Jeff, Matt and their reviewers managed to diagnose, fix, review, land such significant optimizations in a couple of days. My laptop of pain feels much faster already.</p>

<p>In the coming weeks expect to see smoother tab switching, smoother animations, lower profiling overhead as we work through issues discussed during the workweek.</p>
]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Snappy #43: Big improvements: faster startup? Smoother tabstrip!]]></title>
    <link href="http://taras.glek.net/blog/2012/11/05/snappy-43-big-improvements-faster-startup-smoother-tabstrip/"/>
    <updated>2012-11-05T09:22:03-08:00</updated>
    <id>http://taras.glek.net/blog/2012/11/05/snappy-43-big-improvements-faster-startup-smoother-tabstrip</id>
    <content type="html"><![CDATA[<p>Our median startup performance (as measured by <a href="https://metrics.mozilla.com/data/content/pentaho-cdf-dd/Render?solution=metrics2&amp;path=%2Ftelemetry&amp;file=telemetryEvolution.wcdf&amp;bookmarkState={%22impl%22%3A%22client%22%2C%22params%22%3A{%22referenceDate%22%3A%222012-11-05%22%2C%22appNameParameter%22%3A%22[Application].[Firefox]%22%2C%22osParameter%22%3A%22[OS].[WINNT]%22%2C%22channelParameter%22%3A%22[Channel].[nightly]%22%2C%22reasonParameter%22%3A%22[Reason].[idle-daily]%22%2C%22histogramParameter%22%3A%22[Histogram].[SIMPLE_MEASURES_FIRSTPAINT]%22%2C%22histogramPopupTools%22%3A%22%22%2C%22duplicateHistogram%22%3A%22%23duplicateHistogram%22%2C%22medianButtonParam%22%3A1%2C%22scatterChart%22%3A%22%22}}">SIMPLE_MEASURES_FIRST_PAINT</a>) improved between 20%-25% at the end of Firefox 18 cycle (~Oct 26). Strangely most of the speedup seems to have come from a 50% speedup in library loading (measured by <a href="https://metrics.mozilla.com/data/content/pentaho-cdf-dd/Render?solution=metrics2&amp;path=%2Ftelemetry&amp;file=telemetryEvolution.wcdf&amp;bookmarkState={%22impl%22%3A%22client%22%2C%22params%22%3A{%22referenceDate%22%3A%222012-11-05%22%2C%22appNameParameter%22%3A%22[Application].[Firefox]%22%2C%22osParameter%22%3A%22[OS].[WINNT]%22%2C%22channelParameter%22%3A%22[Channel].[nightly]%22%2C%22reasonParameter%22%3A%22[Reason].[saved-session]%22%2C%22histogramParameter%22%3A%22[Histogram].[SIMPLE_MEASURES_MAIN]%22%2C%22histogramPopupTools%22%3A%22%22%2C%22duplicateHistogram%22%3A%22%23duplicateHistogram%22%2C%22medianButtonParam%22%3A1%2C%22scatterChart%22%3A%22%22}}">SIMPLE_MEASURES_MAIN</a>).</p>

<p><a href="http://taras.glek.net/assets/images/2012-11-05-snappy-43-big-improvements-faster-startup-smoother-tabstrip/startup2025.png"><img src="http://taras.glek.net/assets/images/2012-11-05-snappy-43-big-improvements-faster-startup-smoother-tabstrip/startup2025.png" alt="" /></a></p>

<p><strong>Tab-strip</strong></p>

<p>Bas Schouten landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=805831">bug 805831</a> which should further speed up tab-strip drawing when 2d-acceleration is used. Neil Deakin fixed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=792296">bug 792296</a> and <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=752376">bug 752376</a>.</p>

<p>We spent a lot of time focusing on tab smoothness recently. We still have a long way to go, but I checked telemetry data and the improvements are staggering. In the picture below I&#8217;m comparing tab closing animation(<a href="https://metrics.mozilla.com/data/content/pentaho-cdf-dd/Render?solution=metrics2&amp;path=%2Ftelemetry&amp;file=telemetryHistogram.wcdf&amp;bookmarkState={%22impl%22%3A%22client%22%2C%22params%22%3A{%22startDate%22%3A%222012-10-06%22%2C%22endDate%22%3A%222012-11-04%22%2C%22appVersion%22%3A%22%22%2C%22appName%22%3A%22Firefox%22%2C%22arch%22%3A%22%22%2C%22OS%22%3A%22WINNT%22%2C%22version%22%3A%226.1%22%2C%22channel%22%3A%22nightly%22%2C%22reason%22%3A%22idle-daily%22%2C%22appBuildID%22%3A%22%22%2C%22fromPlatformBuildID%22%3A%22%22%2C%22toPlatformBuildID%22%3A%22%22%2C%22excludeParam%22%3A%22%22%2C%22measure%22%3A%22FX_TAB_ANIM_CLOSE_MS%22%2C%22histogramCompareParam%22%3A%22appVersion%22%2C%22histogramVariablesParam%22%3A%2217.0a1%2C18.0a1%2C19.0a1%22%2C%22platformBuildIDMode%22%3A%22LATEST%22%2C%22platformBuildIDTopCount%22%3A%2230%22%2C%22conditionsStatistic%22%3A%22%23conditionsStatistic%22%2C%22submissionsParameter%22%3A[[134541]]}}">FX_TAB_ANIM_CLOSE</a>) between 17, 18, 19. In the picture below there should be 0 entries to the right of 154(that&#8217;s our problematic performance tail). In 2.5 months, we went from having almost 20% of our tab animations taking > 400ms to complete to ~3%.</p>

<p><a href="http://taras.glek.net/assets/images/2012-11-05-snappy-43-big-improvements-faster-startup-smoother-tabstrip/fx_anim_tab_close1.png"><img src="http://taras.glek.net/assets/images/2012-11-05-snappy-43-big-improvements-faster-startup-smoother-tabstrip/fx_anim_tab_close1.png" alt="" /></a></p>

<p>In addition to median perf improving, tab animations are now much less likely to vary in duration, etc. This required fixes in layout, gfx, frontend code. It&#8217;s really great to see a cross-team effort producing tangible results. It&#8217;s too bad that our analysis infrastructure makes it so hard to pinpoint specific changes that contributed most to an improvement like this.</p>

<p><strong>Misc</strong></p>

<p>Matt Woodrow improve performance of a periodic table demo in bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=806256">806256</a>. However, performance is still poor on some types of machines, so I filed bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=808838">808838</a>.</p>

<p>Dão Gottwald landed bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=756313">756313</a> which is similarly to his work in last Snappy update postphones doing content work until Firefox chrome is painted.</p>

<p>Benoit Girard changed the <a href="https://addons.mozilla.org/en-us/firefox/addon/gecko-profiler/">profiler </a>so it now updates the url as the treeview is being navigated. This makes it much easier to discuss what we are seeing in the profile.</p>

<p><strong>Blog</strong></p>

<p>Thanks for the feedback on blogging platform alternatives. I turned on a better captcha plugin to deflect spam. A lot less spam gets through now (but I think it&#8217;s also preventing legitimate users from getting through). If you are having trouble commenting, use twitter for now.</p>
]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Snappy #42]]></title>
    <link href="http://taras.glek.net/blog/2012/10/26/snappy-42/"/>
    <updated>2012-10-26T08:01:40-07:00</updated>
    <id>http://taras.glek.net/blog/2012/10/26/snappy-42</id>
    <content type="html"><![CDATA[<p>Vladan Djeric landed a probe to directly measure various DOM Local Storage overheads, bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=802920">802920</a>, <a href="http://is.gd/BYJQkE">telemetry data</a>.</p>

<p><strong>Frontend Speedups</strong></p>

<p>I thought our frontend optimization people did not have spare cycles for snappy UI fixes due to other important projects atm, but they proved me wrong this week.</p>

<p>Jared Wein landed bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=804968">804968</a> which fixes jank where our awesomebar popup would appear then disappear while typing in the location bar. We were flushing layout for the top and bottom result on each adjustment to the awesomebar results, those flushes weren&#8217;t necessary for each time, they are now skipped after the first pass in the browser session.</p>

<p>Dão Gottwald landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=752376">bug 752376</a> which removes some expensive layout flushes when switching tabs if the user isn&#8217;t overflowing their tabbar.</p>

<p>Dão also landed bug<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=715402"> 715402</a> which corrects certain initialization code to run after the Firefox is drawn. Previously this code would get delayed, but due to some undeterministic event madness it would still be likely to get scheduled to run before Firefox is drawn on the screen. This should result in 10% faster perceived startups in some cases.</p>

<p><strong>Profiler-assisted Bug Reporting</strong></p>

<p>I looked at bug<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=642257"> 642257</a> and gave up figuring out what causes the problem because I could not reproduce it. I asked the reporter to try to record a profile of the problem with the <a href="https://developer.mozilla.org/en-US/docs/Performance/Profiling_with_the_Built-in_Profiler">gecko profiler</a>. Within 2.5 hours of the profile being posted in the bug, Timothy Nikkel identified the problem and posted a patch for it.</p>

<p>I&#8217;m very excited about this because the reporter has never used a profiler and yet on the first try helped fix a hard to reproduce bug. Thanks to a dedicated bug reporter, keen layout hackers and our new profiling infrastructure Flash in background tabs will no longer slow down our layout calculations. For many types of bugs identifying the problem is the hardest part, this is very promising.</p>

<p><strong>Moving Blogs Soon</strong></p>

<p>I will be moving to a new blog location as soon as I decide on a better blog setup. I&#8217;ve been irritated by Wordpress since I started at Mozilla in 2006. The volume of comment spam has increased exponentially this year. After 6 years of suffering a terrible UI, spam, slowness, lossyness, I&#8217;m ready to move on to a blogging service elsewhere. If you have any suggestions for blog providers, ping me on <a href="https://twitter.com/tarasglek">twitter</a> as I likely wont see your comment in the mountain of spam.</p>
]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Snappy #41]]></title>
    <link href="http://taras.glek.net/blog/2012/10/18/snappy-41/"/>
    <updated>2012-10-18T08:53:19-07:00</updated>
    <id>http://taras.glek.net/blog/2012/10/18/snappy-41</id>
    <content type="html"><![CDATA[<p>Jeff Muizelaar may not have cut tab switch times in half in my <a href="http://taras.glek.net/blog/2012/10/15/snappy-40-faster-tabswitching-startup-analysis/">last update</a>. The overhead moved to a later part of the process that we were not measuring before the change landed. We&#8217;ll be able to tell the magnitude of the tab-switch improvement was by landing bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=800031">800031</a> on Aurora.</p>

<p>Matt Woodrow reduced tab-close animation jank in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=750417">bug 750417</a>.</p>
]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Snappy #40: Faster tabswitching, startup analysis]]></title>
    <link href="http://taras.glek.net/blog/2012/10/15/snappy-40-faster-tabswitching-startup-analysis/"/>
    <updated>2012-10-15T03:25:14-07:00</updated>
    <id>http://taras.glek.net/blog/2012/10/15/snappy-40-faster-tabswitching-startup-analysis</id>
    <content type="html"><![CDATA[<p>This was an interesting week. On one hand all performance aspects of tab strip work were suspended until end of year on the frontend team, on the other impressive gains were made on platform side of things.</p>

<p><strong>Jeff Muizelaar cut tab switch times in half</strong></p>

<p>Data came in on Jeff&#8217;s optimization I mentioned <a href="http://taras.glek.net/blog/2012/10/04/snappy-39/">last week</a>: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=792199">bug 792199</a>. This halved our median tab switch time. Since this also landed at the end of our 18 cycle, a comparison between 18/19 Nightlies gives us an idea of how this changed our tab switching times overall. Note the actual difference would be greater since both 18 &amp; 19 include data points with Jeff&#8217;s patch, but the majority of data in 18 is without Jeff&#8217;s patch.</p>

<p><a href="http://taras.glek.net/assets/images/2012-10-15-snappy-40-faster-tabswitching-startup-analysis/fx_tab_switch_update.png"><img src="http://taras.glek.net/assets/images/2012-10-15-snappy-40-faster-tabswitching-startup-analysis/fx_tab_switch_update.png" alt="" /></a></p>

<p><em>Black: v18, Blue V19. X-axis represents time in milliseconds to do a tab switch, excluding time to paint.</em></p>

<p>Above graph shows a shift towards fast tab switch times across the board with particularly nice improvements in the tail. See the corresponding 50% fall in medians on our <a href="https://metrics.mozilla.com/data/content/pentaho-cdf-dd/Render?solution=metrics2&amp;path=%2Ftelemetry&amp;file=telemetryEvolution.wcdf&amp;bookmarkState={%22impl%22%3A%22client%22%2C%22params%22%3A{%22referenceDate%22%3A%222012-10-09%22%2C%22appNameParameter%22%3A%22[Application].[Firefox]%22%2C%22osParameter%22%3A%22[OS].[WINNT]%22%2C%22channelParameter%22%3A%22[Channel].[nightly]%22%2C%22reasonParameter%22%3A%22[Reason].[saved-session]%22%2C%22histogramParameter%22%3A%22[Histogram].[FX_TAB_SWITCH_UPDATE_MS]%22%2C%22histogramPopupTools%22%3A%22%22%2C%22duplicateHistogram%22%3A%22%23duplicateHistogram%22%2C%22medianButtonParam%22%3A0%2C%22scatterChart%22%3A%22%22}}">telemetry evolution dashboard</a>.</p>

<p>Unfortunately, Jeff&#8217;s patch was too good. Instead of decoding less images, it ended up decoding no images at all causing unnecessary flicker when switching tabs. The patch got backed out, but this accident provided us with a good baseline of how fast tab switching can be without decoding images :) Jeff landed a correction in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=799335">bug 799335</a>.</p>

<p>As I mentioned above graph does not include paint times. Jeff also landed bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=800031">800031</a> which measures the complete tab switch duration (including paint time).</p>

<p><a href="http://taras.glek.net/assets/images/2012-10-15-snappy-40-faster-tabswitching-startup-analysis/fx_tab_switch_total.png"><img src="http://taras.glek.net/assets/images/2012-10-15-snappy-40-faster-tabswitching-startup-analysis/fx_tab_switch_total.png" alt="" /></a></p>

<p><strong>Timothy Nikkel&#8217;s Visible Image Decoding</strong></p>

<p>Currently Firefox tends to decode too many images while browsing image-heavy sites. This hurts our total memory consumption, increases tab switch times, etc. Timothy has been posting tests builds in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=689623">bug 689623</a> which try to only decode visible images. Please give those builds a spin if you suffer from poor Firefox performance while browsing image-heavy sites.</p>

<p><strong>Startup Time Profiling</strong></p>

<p>Benoit Girard taught the the Gecko profiler how to capture most of browser startup in bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=799638">799638</a>. This might be the most important achievement so far in tackling startup problems caused by extensions. This means that every Nightly user (and in a few weeks every Firefox user) can install the <a href="https://developer.mozilla.org/en-US/docs/Performance/Profiling_with_the_Built-in_Profiler">Gecko profiler</a>, click &#8216;Profile Startup&#8217; and get a report on what makes Firefox startup slow. This can then be posted to bugzilla, <a href="http://support.mozilla.com/">SUMO</a>, <a href="https://addons.mozilla.org/">AMO </a>or this blog so we can easily identify problematic addons, problematic APIs used by addons and the extent of startup overhead contributed by them.</p>

<p>Making extension-aware startup profiling easy has incredible potential for making Firefox startup faster for extension-addicted users. If you can&#8217;t wait to try this out, you can install a <a href="https://raw.github.com/bgirard/Gecko-Profiler-Addon/2d0c32507f21d4e64a5eb3bff091f23d21528ad5/geckoprofiler.xpi">development snapshot</a> of the profiler extension. Feel free to post your startup profile links in a comment.</p>

<p><strong>Proxy-detection</strong></p>

<p>As I mentioned last time, Patrick McManus fixed proxy-related jank in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=769764">bug 769764</a>. Last week Vladan Djeric analyzed our chromehang data and confirmed that proxy jank went from being one of our top offenders to not happening.</p>
]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Snappy #39 ]]></title>
    <link href="http://taras.glek.net/blog/2012/10/04/snappy-39/"/>
    <updated>2012-10-04T09:24:57-07:00</updated>
    <id>http://taras.glek.net/blog/2012/10/04/snappy-39</id>
    <content type="html"><![CDATA[<p>We should no longer do proxy-related IO on the main thread now that Patrick McManus landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=769764">bug 769764</a>. Synchronous proxy code resulted in a miserable user experience for people using proxies, but it also affected normal users during proxy-detection. This was one of the top intermittent freezes that we&#8217;ve seen.</p>

<p>Tab switching should be much faster in Firefox 18 than before. Jared Wein got rid of an expensive regexp that was applied during a tab switch in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=781588">bug 781588</a>.  Jeff Muizelaar landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=792199">bug 792199</a> which should make switching to a image-heavy sites much faster. Jared&#8217;s change is already on nightlies, Jeff&#8217;s change should show up tomorrow if everything goes well.</p>

<p>Matt Woodrow landed the huge change that is DLBI in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=539356">bug 539356</a> (yet again). DLBI speeds up reflows, reduces repaints resulting in a more responsive browser. For more details see Robert O&#8217;Callahan&#8217;s <a href="https://groups.google.com/forum/#!topic/mozilla.dev.platform/UFndiSxW4rU">announcement</a>.</p>

<p><strong>Startup Regression </strong></p>

<p>After working on improving startup for the last couple of releases we seem to have regressed it during the 18 cycle. I filed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=798130">bug 798130</a> on this. I just noticed the regression a few hours ago. If anyone has ideas on what might&#8217;ve caused it, please comment.</p>

<p><strong>Profiler</strong></p>

<p><a href="https://addons.mozilla.org/en-us/firefox/addon/gecko-profiler/">Gecko profiler</a> now lives on AMO.</p>
]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Snappy in Warsaw: pierogy-fueled hackfest]]></title>
    <link href="http://taras.glek.net/blog/2012/09/17/snappy-in-warsaw-pierogy-fueled-hackfest/"/>
    <updated>2012-09-17T20:06:15-07:00</updated>
    <id>http://taras.glek.net/blog/2012/09/17/snappy-in-warsaw-pierogy-fueled-hackfest</id>
    <content type="html"><![CDATA[<p>After MozCamp, we held a snappy meet-up at <a href="http://www.noacowork.pl/">NoaCowork</a> in Warsaw. I believe this was one of the most productive weeks I had the pleasure of participating in since I started at Mozilla. My only regret I was not motivated to organize any memorable after-work activities while suffering the MozCamp.EU plague (Mozilla gatherings are great for exchanging global influenza strains).</p>

<p><strong>Profiler</strong></p>

<p>Benoit Girard went through existing and upcoming profiler features. We made sure that everyone in attendance knew how to use the profiler. We also discussed potential UX improvements. Markus Stange is a community contributor who originally designed and implemented the current profiler UI. He attended MozCamp and spent most of Monday with us planning future profiler improvements with Benoit.</p>

<p><strong>Bas-tool: Azure Drawing Tracer</strong></p>

<p>Bas Schouten presented his work-in-progress graphics tracing tool. Our graphics people have been using the Microsoft <a href="http://www.google.com.ua/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CCEQFjAA&amp;url=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FPIX_(Microsoft">PIX tool</a>&amp;ei=D0FYUM2yK4zasgat6IHoCQ&amp;usg=AFQjCNFaEbWMtMB_UAvO0oOb0drynfX-qw) to debug accelerated drawing issues with Direct2D. I believe Bas got fed up with the buggyness and limitations of an otherwise excellent tool and wrote a similar Azure-specific tool with some special Bas-sauce.</p>

<p>Bas-tool presents a graphics trace so one can see how Firefox draws on the screen. Seeing how something is drawn step-by-step helps us see when we not using efficient graphics primitives, are doing redundant invalidations, etc. The tool can also do tricks like bruteforce graphics operations to find redundant ones, etc.</p>

<p>I expect Bas will present this tool + accompanying patches soon.</p>

<p><strong>OMTC &amp; Tab Strip</strong></p>

<p>Current Firefox tab-strip implementation is crufty. It uses expensive graphics primitives, inefficient CSS transitions, implements scrolling/overflow animations in JS and does other non-performant things (tracked by <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=593680">bug 593680</a>). These things happen when one keeps adding features without having good profiling/tracing tools.</p>

<p>Tim Taubert lead the effort to prototype a new tab strip that is implemented without JS animations and uses OMTC-friendly, efficient graphics primitives. Bas-tool was used heavily to see whether CSS transitions were animating efficiently. We sorely missed having a layout person around help diagnose layerizing issues, etc. Turns out CSS transition scheduling is very <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=753139#c10">jank-sensitive</a>. We may also need come up + implement some new CSS transition to make an attractive tab strip. Good news is that any backend improvements we make in this area should make it easier to implement fluid, responsive web apps.</p>

<p>Tim Taubert, Benoit Girard &amp; Jared Wein cobbled together a desktop OMTC throbber demo where the tab throbber was implemented using CSS rotations which made it animate smoothly through content jank.</p>

<p><strong>Chromehangs</strong></p>

<p>Me, Josh Aas, Vladan Djeric, Lawrence Mandel went through our new non-destructive chromehang report. Chromehangs are multi-second browser stalls that we report via telemetry. See the complete list that we went through <a href="https://etherpad.mozilla.org/chromehangs">here</a>.</p>

<p>Looks our recently-discovered synchronous proxy code and flash are to blame for most of our temporary hangs. Proxy stuff should disappear once bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=769764">769764</a> is fixed. <a href="http://www.google.com.ua/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CCQQFjAA&amp;url=http%3A%2F%2Fmsujaws.wordpress.com%2F2012%2F04%2F11%2Fopting-in-to-plugins-in-firefox%2F&amp;ei=DUhYUKGvA4eTswbZ94DYCw&amp;usg=AFQjCNGkVdVAsE90oEm9Ycou1OrBheMdIg">Click-to-play</a> will help with some of the plugin-caused hangs. We will be discussing how to deal with the rest of the plugin-jank in the coming weeks.</p>

<p>My favourite chromehang was the one that pinpointed why downloads jank Firefox so much: bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=789932">789932</a>. We tried to pin this on anti-virus scans, download manager sqlite activity, but the main reason turned out to be very simple. Turns out we do network traffic on a networking thread only to write out file contents to disk on main thread.</p>

<p><strong>Other </strong></p>

<p>Paulo Amadini, Lawrence Mandel, Gavin Sharp and me made plans to get rid of main thread SQL usage in download, addon manager.</p>

<p>Vladan Djeric explained his plans to speed up &amp; reduce jank caused by DOM Local Storage.</p>

<p>Margaret Leibovic worked on removing synchronous cache API usage, added pageload telemetry. She also filed a bug that resulted in 20% faster link navigation in Fennec (bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=789889">789889</a>). Perhaps we should do the same on our Metro build?</p>

<p>Olli Pettay &amp; Felipe Gomes worked on making our social api features not leak memory.</p>

<p>Julian Seward, Mike Hommey, Benoit Girard worked on improving our profiling infrastructure and making it work on Android, B2G, Linux.</p>

<p>Josh Aas, Lawrence &amp; me coordinated on Snappy priorities on necko team.</p>

<p>I&#8217;m sure I missed a few projects, I hope other attendees blog about their work last week.</p>
]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[MozCamp.EU in Warsaw]]></title>
    <link href="http://taras.glek.net/blog/2012/09/17/moacamp-eu-in-warsaw/"/>
    <updated>2012-09-17T18:09:30-07:00</updated>
    <id>http://taras.glek.net/blog/2012/09/17/moacamp-eu-in-warsaw</id>
    <content type="html"><![CDATA[<p>Last week a few of us attended MozCamp.EU in Warsaw. Me, Benoit &amp; Vlad presented a <a href="https://wiki.mozilla.org/MozCampEU2012/Schedule/Desktopandmobile/All-About-Performance">talk </a>on performance work. Primary aim of our talk was to inform our community about various performance tools that came to fruition of the past year and how to use them to investigate Firefox performance problems. Hopefully we&#8217;ll see a spike in bug reports with detailed performance information (profiler traces, telemetry histogram+chromehang excepts, etc).</p>

<p>My favourite part of MozCamp was finally meeting some a couple of the impressive community contributors in person. I finally had the pleasure of literally buying beer to thank someone for cleaning up some nasty code. I hope some day we can do a developer-oriented MozCamp-like conference.</p>

<p>My favourite talk was Anant &amp; Tim&#8217;s presentation on WebRTC. There is something incredibly attractive about having an encrypted, cross-browser, firewall-punching p2p implementation (realtime open video conferencing is a nice bonus). See Anant&#8217;s <a href="http://kix.in/2012/09/16/mozcamp-eu-2012-mobilize-mozilla/">blog post</a> for more details.</p>
]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Snappy #38: Responsiveness Fixes Galore]]></title>
    <link href="http://taras.glek.net/blog/2012/09/04/snappy-38/"/>
    <updated>2012-09-04T02:17:48-07:00</updated>
    <id>http://taras.glek.net/blog/2012/09/04/snappy-38</id>
    <content type="html"><![CDATA[<p>End of summer is a tough time to make progress because a lot of people are on vacation. Surprisingly, Firefox got some good fixes in since the last update.</p>

<p><strong>Less Slow Startups</strong></p>

<p><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=726125">Bug 726125</a>: should get rid of a lot of super-slow startups. Due to an abstraction accident we ended up validating jars more eagerly than expected. Firefox would go on the net (on the main thread) to check the certificate every time a signed jar was opened. There are over 500 signed extensions on AMO with over 14million active users. See the following for background on the (now dead) feature that caused our jar code to go nuts: <a href="http://www.mozilla.org/projects/security/components/signed-scripts.html">signed scripts</a> and <a href="https://developer.mozilla.org/en-US/docs/Bypassing_Security_Restrictions_and_Signing_Code">note on removal of signed script</a> support. Thanks for Nicholas Chaim and Vladan Djeric for fixing this.</p>

<p><strong>Less Proxy Lag (WIP)</strong></p>

<p><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=769764#c5">Bug 769764</a>. We have received a lot of strange complaints about Firefox network performance that we could never reproduce. Turned out this was because none of us used proxies. Patrick McManus discovered a lot of synchronous proxy and DNS code in our network stack.</p>

<p>Fix for this should also improve performance for people without proxies since proxy-autodetection code was also doing main thread IO. As a result all of us replacing sync APIs with async ones all of the existing proxy-related addons will have to be updated. Patrick is reaching out to addon authors to make sure addons are updated in time for the next release.</p>

<p><strong>Less UI Repaint Lag</strong></p>

<p><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=786421">Bug 786421</a>: Nightlies got unbearably slow for me recently. Turned out we ended continuously resizing + applying theme + redrawing invisible tooltips on every paint. Thanks for Timothy Nikkel for fixing this. This bug never affected anyone outside of the Nightly/Aurora testers, but it serves as yet another example of how the <a href="https://developer.mozilla.org/en-US/docs/Performance/Profiling_with_the_Built-in_Profiler">Gecko Profiler</a> makes it easier than ever to diagnose weird performance problems. The single biggest contribution anyone can do at the moment is to provide instructions of how to reproduce lag with accompanying profiler traces.</p>

<p><strong>Less Gradient Lag</strong></p>

<p><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=761393">Bug 761393</a>: Paul Adenot implemented a gradient cache. This was landed as a Telemetry experiment so we can determine what the optimal cache retention strategy is. We&#8217;ll be watching the relationship between GRADIENT_DURATION and GRADIENT_RETENTION_TIME in the coming weeks. Currently rendering gradients cause stalls in the GPU pipeline. In previous experiments we found out that most of the tab-switch rendering time in hardware-accelerated Firefox is spent rendering gradients :(. Gradients are hard to notice for casual users, but they are heavily used in our tab strip and on Google web properties.</p>

<p><strong>MozCamp</strong></p>

<p>I may not have a chance to post the next snappy update as I&#8217;ll be hopping on the plane to Warsaw right after our meeting. If you are attending MozCamp come to our <a href="https://wiki.mozilla.org/index.php?title=MozCampEU2012/Schedule/Desktopandmobile/All-About-Performance">&#8216;All About Performance&#8217; session</a>. Our goal for the talk is to significantly expand the pool of people who can diagnose Firefox (and web) performance problems.</p>
]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[DXR now does live regexp search, thanks Google Code]]></title>
    <link href="http://taras.glek.net/blog/2012/08/29/dxr-now-does-live-regexp-search-thanks-google-code/"/>
    <updated>2012-08-29T06:56:03-07:00</updated>
    <id>http://taras.glek.net/blog/2012/08/29/dxr-now-does-live-regexp-search-thanks-google-code</id>
    <content type="html"><![CDATA[<p>Google code was once the best code-search tool in the business. Then it got shut down, except for a few special instances like <a href="http://code.google.com/p/chromium/source/search?q=Startup.BrowserMessageLoopStartTime&amp;origq=Startup.BrowserMessageLoopStartTime&amp;btnG=Search+Trunk">chromium</a>.</p>

<p>Our intern, Jonas Finnemann Jensen, took the re2 code that used to power google code search and integrated it into DXR (among other cleanups). See his blog <a href="http://jonasfj.dk/blog/2012/08/regular-expressions-on-dxr-allizom-org/">post </a>for more details.</p>

<p>Regexps combined with the new instant search feature changed how I search Mozilla code. Instant search means that I&#8217;m constantly refining my search terms to narrow down my results to a minimum before I leave the search page. Digging through Mozilla code is pretty fun now. I believe our development instance* of <a href="http://dxr.allizom.org/search?q=&amp;tree=mozilla-central&amp;redirect=true">DXR</a> is the most pleasant./efficient (even if a bit rough) code indexing solution atm. I no longer miss google code for searching Mozilla.</p>

<p>Now that Mozilla can be searched in a pleasant way, something needs to fill the searching of masses of open source code usecase. Perhaps <a href="https://github.com/">github</a> could plug the &#8220;google code&#8221;-sized gap in developer hearts?</p>

<ul>
<li>we also need to stabilize the development version and move it to <a href="http://dxr.mozilla.org/">dxr.mozilla.org</a>.</li>
</ul>

]]></content>
  </entry>
  
  
  
  <entry>
    <title type="html"><![CDATA[Snappy #37]]></title>
    <link href="http://taras.glek.net/blog/2012/08/23/snappy-37/"/>
    <updated>2012-08-23T09:10:49-07:00</updated>
    <id>http://taras.glek.net/blog/2012/08/23/snappy-37</id>
    <content type="html"><![CDATA[<p>Highlights from <a href="https://wiki.mozilla.org/Performance/Snappy/2012-08-23#Incoming">meeting note</a>s for today:</p>

<ul>
<li>Tim Taubert worked on Firefox UI speedups</li>
<li>Lots of improvements to the profiler from Benoit Girard</li>
<li>More incremental GC work from Jon Coppeard</li>
<li>Vladan Djeric got all of the security reviews and should be able to land Nicholas Chaim&#8217;s fix for networked certificate validation:<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=726125"> bug 726125</a>
We spent most of the meeting discussing bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=784512">bug 784512</a>. According several data sources Firefox 15 Beta loads pages slower than 14. Occasionally problems squeeze past our performance testing + telemetry infrastructure, this looks like one of these times. Unfortunately, it&#8217;s quite hard to reduce a few noisy signals to a concrete performance problem. If you can reproduce a performance regression to do with loading webpages/games/etc in FF15 vs FF14, please leave a comment.</li>
</ul>


<p><strong>Thanks!</strong></p>

<p>Thanks for the great comments on my <a href="http://taras.glek.net/blog/2012/08/16/snappy-36/">previous </a>snappy updates. <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=783755">Bug 783755</a> should take care of the new cache size pref not sticking. <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=718910">Bug 718910</a> on hiding Cache directory from Spotlight is making progress too.</p>

<p>Commenter, kumalos, reported a tab switching regression and posted a profile recorded with our <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CCIQFjAA&amp;url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FPerformance%2FProfiling_with_the_Built-in_Profiler&amp;ei=FLw2UKzMO4WXiQLSgoHwAQ&amp;usg=AFQjCNEGPmI44wGwpjRbtR-WT36EdVv-ew">profiler </a>as evidence. This proved to be an example of bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=783748">783748</a>, and lead us to identify a previously unknown issue in bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=784756">784756</a>. Constructive feedback like this is one of the main reasons I blog.</p>

<p>I highly encourage users interested in improving Firefox performance to use Nightly builds and report bugs with profiler traces attached.</p>

<p><strong>Shutdown Times</strong></p>

<p>I&#8217;ll end with our latest Telemetry data point. This one took a while to get right, but we finally track our shutdown speed.</p>

<p><a href="http://taras.glek.net/blog/files/2012/08/shutdown.png"><img src="http://taras.glek.net/assets/images/2012-08-23-snappy-37/shutdown-300x157.png" alt="" /></a></p>
]]></content>
  </entry>
  
  
</feed>
