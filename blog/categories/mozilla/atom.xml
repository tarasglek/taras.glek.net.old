<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mozilla | All About Performance]]></title>
  <link href="http://taras.glek.net/blog/categories/mozilla/atom.xml" rel="self"/>
  <link href="http://taras.glek.net/"/>
  <updated>2012-12-22T11:15:17-08:00</updated>
  <id>http://taras.glek.net/</id>
  <author>
    <name><![CDATA[Taras Glek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Snappy #45: The view from home]]></title>
    <link href="http://taras.glek.net/blog/2012/12/21/interesting-bugzilla-activity/"/>
    <updated>2012-12-21T12:09:00-08:00</updated>
    <id>http://taras.glek.net/blog/2012/12/21/interesting-bugzilla-activity</id>
    <content type="html"><![CDATA[I'm out until January. However, I setup a [new blog](/blog/2012/12/17/hello-octopress/), so why not test it with a snappy update. 

Benoit Girard sped up shutdown with:

* not forcing startup cache flushes on shutdown: <a title="[Shutdown] Startup cache slows shutdown with < 10 sec uptime" href="https://bugzilla.mozilla.org/show_bug.cgi?id=816656">bug 816656</a>. This speeds up exiting browser soon after startup.
* <a title="[Shutdown] js::NukeCrossCompartmentWrappers takes up to 300ms on shutdown. Avoid doing it for optimized shutdown" href="https://bugzilla.mozilla.org/show_bug.cgi?id=818296">bug 818296</a>: [Shutdown] js::NukeCrossCompartmentWrappers takes up to 300ms on shutdown. Avoid doing it for optimized shutdown. This may significantly reduce our shutdown times. We are waiting on more telemetry data to confirm.

Aaron Klotz made startup slightly faster by speeding up reading of some urlclassifier files in <a title="loading the two safebrowsing files is not as fast as it could be" href="https://bugzilla.mozilla.org/show_bug.cgi?id=810101">bug 810101</a>.

Vladimir Vukicevic landed <a title="requestAnimationFrame generates too short/long frames, especially at the beginning of animation" href="https://bugzilla.mozilla.org/show_bug.cgi?id=731974">bug 731974</a> which results in smoother browser animations and significantly improves the quality of tab-strip animations.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coping with Flash hangs]]></title>
    <link href="http://taras.glek.net/blog/2012/11/26/coping-with-flash-hangs/"/>
    <updated>2012-11-26T01:45:11-08:00</updated>
    <id>http://taras.glek.net/blog/2012/11/26/coping-with-flash-hangs</id>
    <content type="html"><![CDATA[Blocking calls into the Flash plugin can temporarily hang Firefox. This is a problem because sometimes the user would be happy to kill the plugin to access their webpage and at other times it's the only way to get certain flash apps/games to load. If you suffer from flash-related hangs see Aaron's [blog post](http://dblohm7.ca/blog/2012/11/22/plugin-hang-user-interface-for-firefox/) for some builds to try. He is working a new [feature ](https://wiki.mozilla.org/Features/Firefox/Windows_Plugin_Hang_UI)to provide an option to kill hanging flash instances.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snappy #44: Fixing tab switching in Vancouver]]></title>
    <link href="http://taras.glek.net/blog/2012/11/16/snappy-44-fixing-tab-switching-in-vancouver/"/>
    <updated>2012-11-16T10:06:41-08:00</updated>
    <id>http://taras.glek.net/blog/2012/11/16/snappy-44-fixing-tab-switching-in-vancouver</id>
    <content type="html"><![CDATA[I joined our GFX+Layout teams for a workweek in Vancouver. Since profiling is most effective on slow machines, I brought along my trusty Acer  Aspire 722(slow 1.3ghz  CPU+ fast GPU) as my primary laptop. This hardware is great because the combination of a weak CPU + decent GPU means that if we accelerate things right the browser can perform quite well and if we don't, things get really slow. (analogous situation exists when fast CPUs are matched with slow GPUs).  
  
In the beginning of the week I quickly demoed menu lag, slow gmail tab switching([811472](https://bugzilla.mozilla.org/show_bug.cgi?id=811472)). Later in the week we looked at problematic Facebook tab switch times ([811474](https://bugzilla.mozilla.org/show_bug.cgi?id=811474)), Australis(see Matt's [post](http://matthew.noorenberghe.com/blog/2012/11/australis-tabs-where-are-you)) performance. By the end of the week tab switching improved by over 2x for both facebook and gmail. I don't have exact figures because while we can measure general tab switch trends via telemetry, there isn't a convenient way to do it on individual browsers yet. _Help wanted:_ would be great if someone could do up a barebone addon to monitor tab switching in bug [812381](https://bugzilla.mozilla.org/show_bug.cgi?id=812381), we'll fill in the rest.  
  
Jeff Muizelaar started out by speeding up checkbox drawing in bug [809603](https://bugzilla.mozilla.org/show_bug.cgi?id=809603)**.** Matt Woodrow sped up gmail by tweaking how we use layers in bugs [811927](https://bugzilla.mozilla.org/show_bug.cgi?id=811927),  [811570](https://bugzilla.mozilla.org/show_bug.cgi?id=811570).  
  
Matt made sure that we no longer draw layers with opacity of 0 in bug [811831](https://bugzilla.mozilla.org/show_bug.cgi?id=811831). Turns rendering lots of invisible text can be expensive.  
  
Workweeks are a more about communication than getting code landed, so it is impressive that Jeff, Matt and their reviewers managed to diagnose, fix, review, land such significant optimizations in a couple of days. My laptop of pain feels much faster already.  
  
In the coming weeks expect to see smoother tab switching, smoother animations, lower profiling overhead as we work through issues discussed during the workweek.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snappy #43: Big improvements: faster startup? Smoother tabstrip!]]></title>
    <link href="http://taras.glek.net/blog/2012/11/05/snappy-43-big-improvements-faster-startup-smoother-tabstrip/"/>
    <updated>2012-11-05T09:22:03-08:00</updated>
    <id>http://taras.glek.net/blog/2012/11/05/snappy-43-big-improvements-faster-startup-smoother-tabstrip</id>
    <content type="html"><![CDATA[Our median startup performance (as measured by [SIMPLE_MEASURES_FIRST_PAINT](https://metrics.mozilla.com/data/content/pentaho-cdf-dd/Render?solution=metrics2&path=%2Ftelemetry&file=telemetryEvolution.wcdf&bookmarkState={\%22impl%22%3A%22client%22%2C%22params%22%3A{\%22referenceDate%22%3A%222012-11-05%22%2C%22appNameParameter%22%3A%22[Application].[Firefox]%22%2C%22osParameter%22%3A%22[OS].[WINNT]%22%2C%22channelParameter%22%3A%22[Channel].[nightly]%22%2C%22reasonParameter%22%3A%22[Reason].[idle-daily]%22%2C%22histogramParameter%22%3A%22[Histogram].[SIMPLE_MEASURES_FIRSTPAINT]%22%2C%22histogramPopupTools%22%3A%22%22%2C%22duplicateHistogram%22%3A%22%23duplicateHistogram%22%2C%22medianButtonParam%22%3A1%2C%22scatterChart%22%3A%22%22}})) improved between 20%-25% at the end of Firefox 18 cycle (~Oct 26). Strangely most of the speedup seems to have come from a 50% speedup in library loading (measured by [SIMPLE_MEASURES_MAIN](https://metrics.mozilla.com/data/content/pentaho-cdf-dd/Render?solution=metrics2&path=%2Ftelemetry&file=telemetryEvolution.wcdf&bookmarkState={\%22impl%22%3A%22client%22%2C%22params%22%3A{\%22referenceDate%22%3A%222012-11-05%22%2C%22appNameParameter%22%3A%22[Application].[Firefox]%22%2C%22osParameter%22%3A%22[OS].[WINNT]%22%2C%22channelParameter%22%3A%22[Channel].[nightly]%22%2C%22reasonParameter%22%3A%22[Reason].[saved-session]%22%2C%22histogramParameter%22%3A%22[Histogram].[SIMPLE_MEASURES_MAIN]%22%2C%22histogramPopupTools%22%3A%22%22%2C%22duplicateHistogram%22%3A%22%23duplicateHistogram%22%2C%22medianButtonParam%22%3A1%2C%22scatterChart%22%3A%22%22}})).  
  
[![](/assets/images/2012-11-05-snappy-43-big-improvements-faster-startup-smoother-tabstrip/startup2025.png)](/assets/images/2012-11-05-snappy-43-big-improvements-faster-startup-smoother-tabstrip/startup2025.png)  
  
**Tab-strip**  
  
Bas Schouten landed [bug 805831](https://bugzilla.mozilla.org/show_bug.cgi?id=805831) which should further speed up tab-strip drawing when 2d-acceleration is used. Neil Deakin fixed [bug 792296](https://bugzilla.mozilla.org/show_bug.cgi?id=792296) and [bug 752376](https://bugzilla.mozilla.org/show_bug.cgi?id=752376).  
  
We spent a lot of time focusing on tab smoothness recently. We still have a long way to go, but I checked telemetry data and the improvements are staggering. In the picture below I'm comparing tab closing animation([FX_TAB_ANIM_CLOSE](https://metrics.mozilla.com/data/content/pentaho-cdf-dd/Render?solution=metrics2&path=%2Ftelemetry&file=telemetryHistogram.wcdf&bookmarkState={\%22impl%22%3A%22client%22%2C%22params%22%3A{\%22startDate%22%3A%222012-10-06%22%2C%22endDate%22%3A%222012-11-04%22%2C%22appVersion%22%3A%22%22%2C%22appName%22%3A%22Firefox%22%2C%22arch%22%3A%22%22%2C%22OS%22%3A%22WINNT%22%2C%22version%22%3A%226.1%22%2C%22channel%22%3A%22nightly%22%2C%22reason%22%3A%22idle-daily%22%2C%22appBuildID%22%3A%22%22%2C%22fromPlatformBuildID%22%3A%22%22%2C%22toPlatformBuildID%22%3A%22%22%2C%22excludeParam%22%3A%22%22%2C%22measure%22%3A%22FX_TAB_ANIM_CLOSE_MS%22%2C%22histogramCompareParam%22%3A%22appVersion%22%2C%22histogramVariablesParam%22%3A%2217.0a1%2C18.0a1%2C19.0a1%22%2C%22platformBuildIDMode%22%3A%22LATEST%22%2C%22platformBuildIDTopCount%22%3A%2230%22%2C%22conditionsStatistic%22%3A%22%23conditionsStatistic%22%2C%22submissionsParameter%22%3A[[134541]]}})) between 17, 18, 19. In the picture below there should be 0 entries to the right of 154(that's our problematic performance tail). In 2.5 months, we went from having almost 20% of our tab animations taking > 400ms to complete to ~3%.  
  
  
  
[![](/assets/images/2012-11-05-snappy-43-big-improvements-faster-startup-smoother-tabstrip/fx_anim_tab_close1.png)](/assets/images/2012-11-05-snappy-43-big-improvements-faster-startup-smoother-tabstrip/fx_anim_tab_close1.png)  
  
In addition to median perf improving, tab animations are now much less likely to vary in duration, etc. This required fixes in layout, gfx, frontend code. It's really great to see a cross-team effort producing tangible results. It's too bad that our analysis infrastructure makes it so hard to pinpoint specific changes that contributed most to an improvement like this.  
  
**Misc**  
  
Matt Woodrow improve performance of a periodic table demo in bug [806256](https://bugzilla.mozilla.org/show_bug.cgi?id=806256). However, performance is still poor on some types of machines, so I filed bug [808838](https://bugzilla.mozilla.org/show_bug.cgi?id=808838).  
  
Dão Gottwald landed bug [756313](https://bugzilla.mozilla.org/show_bug.cgi?id=756313) which is similarly to his work in last Snappy update postphones doing content work until Firefox chrome is painted.  
  
Benoit Girard changed the [profiler ](https://addons.mozilla.org/en-us/firefox/addon/gecko-profiler/)so it now updates the url as the treeview is being navigated. This makes it much easier to discuss what we are seeing in the profile.  
  
**Blog**  
  
Thanks for the feedback on blogging platform alternatives. I turned on a better captcha plugin to deflect spam. A lot less spam gets through now (but I think it's also preventing legitimate users from getting through). If you are having trouble commenting, use twitter for now.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snappy #42]]></title>
    <link href="http://taras.glek.net/blog/2012/10/26/snappy-42/"/>
    <updated>2012-10-26T08:01:40-07:00</updated>
    <id>http://taras.glek.net/blog/2012/10/26/snappy-42</id>
    <content type="html"><![CDATA[Vladan Djeric landed a probe to directly measure various DOM Local Storage overheads, bug [802920](https://bugzilla.mozilla.org/show_bug.cgi?id=802920), [telemetry data](http://is.gd/BYJQkE).  
  
**Frontend Speedups**  
  
I thought our frontend optimization people did not have spare cycles for snappy UI fixes due to other important projects atm, but they proved me wrong this week.  
  
Jared Wein landed bug [804968](https://bugzilla.mozilla.org/show_bug.cgi?id=804968) which fixes jank where our awesomebar popup would appear then disappear while typing in the location bar. We were flushing layout for the top and bottom result on each adjustment to the awesomebar results, those flushes weren't necessary for each time, they are now skipped after the first pass in the browser session. 

Dão Gottwald landed [bug 752376](https://bugzilla.mozilla.org/show_bug.cgi?id=752376) which removes some expensive layout flushes when switching tabs if the user isn't overflowing their tabbar.

Dão also landed bug[ 715402](https://bugzilla.mozilla.org/show_bug.cgi?id=715402) which corrects certain initialization code to run after the Firefox is drawn. Previously this code would get delayed, but due to some undeterministic event madness it would still be likely to get scheduled to run before Firefox is drawn on the screen. This should result in 10% faster perceived startups in some cases.

**Profiler-assisted Bug Reporting**  
  
I looked at bug[ 642257](https://bugzilla.mozilla.org/show_bug.cgi?id=642257) and gave up figuring out what causes the problem because I could not reproduce it. I asked the reporter to try to record a profile of the problem with the [gecko profiler](https://developer.mozilla.org/en-US/docs/Performance/Profiling_with_the_Built-in_Profiler). Within 2.5 hours of the profile being posted in the bug, Timothy Nikkel identified the problem and posted a patch for it.  
  
I'm very excited about this because the reporter has never used a profiler and yet on the first try helped fix a hard to reproduce bug. Thanks to a dedicated bug reporter, keen layout hackers and our new profiling infrastructure Flash in background tabs will no longer slow down our layout calculations. For many types of bugs identifying the problem is the hardest part, this is very promising.  
  
**Moving Blogs Soon**  
  
I will be moving to a new blog location as soon as I decide on a better blog setup. I've been irritated by Wordpress since I started at Mozilla in 2006. The volume of comment spam has increased exponentially this year. After 6 years of suffering a terrible UI, spam, slowness, lossyness, I'm ready to move on to a blogging service elsewhere. If you have any suggestions for blog providers, ping me on [twitter](https://twitter.com/tarasglek) as I likely wont see your comment in the mountain of spam.
]]></content>
  </entry>
  
</feed>
