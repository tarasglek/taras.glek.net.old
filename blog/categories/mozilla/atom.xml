<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mozilla | All About Performance]]></title>
  <link href="http://taras.glek.net/blog/categories/mozilla/atom.xml" rel="self"/>
  <link href="http://taras.glek.net/"/>
  <updated>2013-03-26T04:35:21-07:00</updated>
  <id>http://taras.glek.net/</id>
  <author>
    <name><![CDATA[Taras Glek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[snappy #53: Faster: Startup, Image Decoding, Touchpad Input. Smoother Animations]]></title>
    <link href="http://taras.glek.net/blog/2013/03/25/snappy-number-53-faster-startup/"/>
    <updated>2013-03-25T06:25:00-07:00</updated>
    <id>http://taras.glek.net/blog/2013/03/25/snappy-number-53-faster-startup</id>
    <content type="html"><![CDATA[### Responsiveness

Joe Drew taught Firefox to decode images on multiple threads. It took a mere 29 patches in {%bug 716140%}. This should speed up page-load and improve tab-switch times. This task was considered too hard a year ago when Snappy people were discussing potential improvements.

Masayuki Nakano improved Firefox scrolling responsiveness on modern touchpads in {%bug 829952%}. Dealing with scroll-events on Windows is a mess. It's nice when we make forward progress in this area.


Marco Bonardo fixed a mysterious cause of main thread IO I ran into in {%bug 830423%}. I ran into this issue because I compulsively navigate to `about:telemetry` in Firefox and look in 'Slow SQL Statements' and 'Browser Hang' sections. I encourage readers of this blog to check out that data whenever Firefox is under-performing.

### Startup

{%bug 810151%} + {%bug 810454%} - Aaron Klotz implemented omnijar + cookie readahead.

{%bug 648407%} - Mike Hommey folded libraries for faster startup. If I'm reading {%bug 852068%} correctly, Firefox now loads 7 fewer libraries on startup. My rough rule of thumb is that each (small) file adds ~30ms to spinning-disk startup so this should net >200ms in startup savings.

Cumulative startup improvements are notoriously difficult to predict + measure, but I suspect that above changes should make for a >=10% speedup in Firefox 22 start over previous releases. We'll be watching telemetry data in the coming weeks.

###Smoothness
{%bug 590422%} - Avi Halachmi is continuing on his quest to make Firefox animate smoothly. This is another tricky step towards smoother animations in Firefox. Since landing this, Avi already embarked on the next gecko-level animation smoothness improvement.

Marco Bonardo spotted some potential for contention in recent DOM Local Storage optimizations. Vladan Djeric landed corrections in {%bug 842852%}.

###Throughput improvements

Ehsan Akhgari reduced allocator contention in {%bug 733277%}.

Tim Taubert taught Firefox to warm up newtab connections on hover {%bug 790882%}

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging with Octopress]]></title>
    <link href="http://taras.glek.net/blog/2013/03/11/living-with-octopress/"/>
    <updated>2013-03-11T16:58:00-07:00</updated>
    <id>http://taras.glek.net/blog/2013/03/11/living-with-octopress</id>
    <content type="html"><![CDATA[A couple months ago I [switched](/blog/2012/12/17/hello-octopress/) to [Octopress](http://octopress.org). I now have some experience to share.

Overall, my Octopress + Github + Disqus experience has been much better blogger, wordpress and livejournal past before it. I only wish I kept my old posts in HTML instead of converting them to markdown. When I was setting up my blog, I did not know that Octopress could render HTML.

####RSS Bugs
I learned not expect much from RSS. In addition to being hard to discover, the default category RSS is buggy. It interprets markdown twice [choking](https://github.com/imathis/octopress/issues/884#issuecomment-12178049) on some exciting Telemetry links in my archives. I had to restort to writing a custom mozilla category feed.

The excerpt feature (`<!-- more -->`) does not work in RSS. To me that defeats the whole point of excerpts, who even reads blog homepages? I do not have time to fix this.

####It's easy to make a mess
I wanted to get rid of some octopress defaults like external CSS, external fonts, modify some layout. I found I could not restrict myself to only editing files in `_directories`. I think this means that switching to a new theme will be hard. I was lazy and ended up with my content in the same repo as the octopress source. I'll have to clean up my act before I can share my customizations.

####Saving Time
One of the worst parts about my old wordpress blog was the amount of UI one had to go through to create HTML links. My snappy updates have a lot of bugzilla links. I wrote an octopress extension to do most of the link work for me. Syntax looks like:
```
{%Bug ####%}, {%bug ####%}
```
If anyone is interested, you can download it [here](http://people.mozilla.org/~tglek/bugzilla.rb) until I clean up my octopress git repository.

Overall I like Octopress and I recommend the octopress/github combo to every developer who is looking to setup a blog. It saves a lot of time and as long as one can deal with lack of unit testing and Ruby, it's great.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snappy #52]]></title>
    <link href="http://taras.glek.net/blog/2013/03/08/snappy-number-52/"/>
    <updated>2013-03-08T16:58:00-08:00</updated>
    <id>http://taras.glek.net/blog/2013/03/08/snappy-number-52</id>
    <content type="html"><![CDATA[###Frontend

####Help-Wanted:

Avi Halachmi [needs your help](http://avih.github.com/blog/2013/02/28/slow-touchpad-scroll-in-firefox/) comparing scrolling behavior between browsers.

####Australis

Mike Conley [blogged](http://mikeconley.ca/blog/2013/03/01/australis-curvy-tabs-more-progress/) that Australis performance is now on-par with current theme on low-end hardware.


###Startup

Aaron Klotz landed {%bug 845907%}. This gives us a consistent way to warm IO caches. This functionality can easily backfire if we end preloading data that does not get used. Uses of readahead should always be accompanied with telemetry to verify it performs as expected. {%Bug 810454%} is the first user of readahead API, it landed with A/B testing telemetry.
Omnijar readhead is next, in {%bug 810151%}. It results in ~60% drop in omni.ja startup read time on Windows on Aaron's machine.

 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snappy #51: Smoothing Tab Animations]]></title>
    <link href="http://taras.glek.net/blog/2013/02/22/snappy-number-51-smoothing-tab-animations/"/>
    <updated>2013-02-22T16:14:00-08:00</updated>
    <id>http://taras.glek.net/blog/2013/02/22/snappy-number-51-smoothing-tab-animations</id>
    <content type="html"><![CDATA[###Lack of Updates

I skipped a Snappy update two-weeks ago (did anyone notice?) due to not having any completed work to report. Snappy has not stagnated, we have big projects inflight see this week's [notes](https://wiki.mozilla.org/Performance/Snappy/2013-02-21) for some details.

###Tab Smoothness

I usually do not cover in-flight work in Snappy updates and expect individual developers to blog about stuff they are working on. However, Avi Halachmi has delayed blogging to focus on quickly advancing Firefox performance, an exception had to me made.

Avi has been investigating tab smoothness since December. His approach relies on detailed instrumentation + sending captured data via Telemetry. This culminated in some exciting bug activity this week:

* {%bug 828097%} According to Telemetry, Firefox tab animations are quite smooth (due to recent improvements like {%bug 731974%}) iff one has the newtab thumbnail feature disabled (via button in top right of the page).
* {%bug 843853%} was filed to fix above performance hit ASAP.
* {%bug 838758%} 20-25% tab animation speedup on Direct2D-accelerated systems.
* {%bug 842967%}, {%bug 590422%} improve animation scheduling.

Due to web-like Firefox UI architecture most of these improvements will enable smoother website perf.

Avi, Matthew Noorenberghe, Mike Conley are working on optimizing our next UI refresh: Australis. Australis is shaping up to be the most perf-tuned theme update we've done. See {%bug 837885%} for how performance is being tracked.

As Avi's manager I found it trying to see weeks of perf-reporting work with no fixes to accompany it. I'm happy to see this investigation investment pay off and serve an example of importance of methodically studying performance before proceeding to optimization.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plugin Hang UI On Aurora]]></title>
    <link href="http://taras.glek.net/blog/2013/02/15/plugin-hang-ui-on-aurora/"/>
    <updated>2013-02-15T16:51:00-08:00</updated>
    <id>http://taras.glek.net/blog/2013/02/15/plugin-hang-ui-on-aurora</id>
    <content type="html"><![CDATA[Aaron wrote a [great post](http://dblohm7.ca/blog/2013/02/15/plugin-hang-ui-on-aurora/) on of the new plugin killer UI and Windows magic involved in debugging it. 

We need help testing the new functionality, please see the link above for details.

Unfortunately, we are still waiting on {%bug 814095%} to get his blog syndicated to planet.

]]></content>
  </entry>
  
</feed>
