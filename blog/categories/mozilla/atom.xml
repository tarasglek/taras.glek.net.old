<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mozilla | All About Performance]]></title>
  <link href="http://taras.glek.net/blog/categories/mozilla/atom.xml" rel="self"/>
  <link href="http://taras.glek.net/"/>
  <updated>2013-02-18T23:44:53-08:00</updated>
  <id>http://taras.glek.net/</id>
  <author>
    <name><![CDATA[Taras Glek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Plugin Hang UI On Aurora]]></title>
    <link href="http://taras.glek.net/blog/2013/02/15/plugin-hang-ui-on-aurora/"/>
    <updated>2013-02-15T16:51:00-08:00</updated>
    <id>http://taras.glek.net/blog/2013/02/15/plugin-hang-ui-on-aurora</id>
    <content type="html"><![CDATA[Aaron wrote a [great post](http://dblohm7.ca/blog/2013/02/15/plugin-hang-ui-on-aurora/) on of the new plugin killer UI and Windows magic involved in debugging it. 

We need help testing the new functionality, please see the link above for details.

Unfortunately, we are still waiting on <a title="Add Aaron Klotz's blog to Planet Mozilla" href="https://bugzilla.mozilla.org/show_bug.cgi?id=814095">bug 814095</a> to get his blog syndicated to planet.

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Planet Mozilla Obsolete for Technical Content?]]></title>
    <link href="http://taras.glek.net/blog/2013/02/15/is-planet-mozilla-obsolete/"/>
    <updated>2013-02-15T11:21:00-08:00</updated>
    <id>http://taras.glek.net/blog/2013/02/15/is-planet-mozilla-obsolete</id>
    <content type="html"><![CDATA[##Good Old Days
I have been remotely working at Mozilla for over 6 years. I like working remotely, but it poses some challenges. Early on I discovered that if I only show up at the HQ a couple times a year, most will people treat me as a stranger. That got old fast.

The problem is that it takes a lot of time time to get everybody up to speed on who you are (defined by what you work on). This means one's work social circle is limited to people who you have frequent bugzilla/irc interactions with + random people who took the time to get to know a random coworker. One can imagine that introverts are not inclined to waste too much energy meeting new people.

The solution was simple: blog a lot. After a couple years of blogging I just had to say "I'm Taras" and a good proportion of the people would connect my face to (obscure static analysis at first) work they read about on [planet](http://planet.mozilla.org). This cut down my introduction overhead significantly. Planet Mozilla had a lot of blogs syndicated to it when I joined. I had a huge audience to introduce my work to.

In addition to creating awareness of my work, blogging about tough problems would occasionally result in helpful comments. People provided tips on static analysis, Windows APIs and even ran scary privileged software I wrote to help me gather data. Due to disproportionate (eg saving days to weeks of work) value of helpful comments I concluded that it's worth spending a couple hours per blog post. Most blog comments might be [garbage](http://davidwalsh.name/blog-comments), but they are easy to ignore. Before I implemented [telemetry](https://wiki.mozilla.org/Telemetry), I was able to find performance extremes solely on blog feedback. Unlike privacy-sensitive telemetry data, blog comments came with email addresses and eager volunteers on the other end. I value comments a lot, it makes me sad when good bloggers disable comments.

To me Planet Mozilla was a great way to keep up with Mozilla technical affairs. We have a lot of smart people working on interesting problems at Mozilla. As a result of past planet experience, I ask every new person who joins the Performance team to get their blog syndicated to planet ASAP. Increasingly that feels like an unproductive suggestion.

##Present

I do not have any data on this. However my feeling is that the volume of blog traffic on planet grew from barely-manageable in the early days to too much. Good technical content never constituted more than 10% of the planet posts. However as absolute blog traffic grew, it became harder to spot the good stuff. In addition to a lot of content being non-technical, in the last few years people started discussing their feelings about others and things got ugly.

I'm pretty sure the result is that there are fewer technical people reading planet than before(due to poor signal/noise ratio). Lack of audience means less incentive to blog (that and the fact that some bloggers are part of the audience that gave up on planet).

So what are we to do? Is planet obsolete for good technical content? Is there a new reddit/hackernews/twitter self-moderating solution for dealing with signal problems? Surely setting up a new planet is no longer considered state of the art for this. 

I am sad to see a public resource like the planet get too big to remain useful with no clear successor.


ps. Sorry for adding to the non-technical noise.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snappy #50]]></title>
    <link href="http://taras.glek.net/blog/2013/01/28/snappy-number-50-misc-speedups/"/>
    <updated>2013-01-28T16:00:00-08:00</updated>
    <id>http://taras.glek.net/blog/2013/01/28/snappy-number-50-misc-speedups</id>
    <content type="html"><![CDATA[###Graphics
In some cases Direct2D-accelerated drawing is slower than the non-accelerated path. Jeff Muizelaar fixed a severe gradient 'hang' in <a title="Avoid hitting D2D slow path when drawing radial gradients from css" href="https://bugzilla.mozilla.org/show_bug.cgi?id=823147">bug 823147</a>.

Avi Halachmi diagnosed a significant menu performance issue in <a title="Menu items slow to paint/respond after peeking their sub-menu popups" href="https://bugzilla.mozilla.org/show_bug.cgi?id=832641">bug 832641</a>, this was promptly fixed by Matt Woodrow.

###Misc Pauses
Vladan Djeric [blogged](https://blog.mozilla.org/vdjeric/2013/01/24/add-on-performance-problems/) about top main-thread SQL issues contributed by addons. Vladan also produced a [chromehang](http://people.mozilla.com/~vdjeric/DecJanHangs.txt) report for last 2 months.

Ehsan Akhgari fixed a *chromehang* caused by leftover debug code: <a title="Multi-second hang during CollectNewLoadedModules" href="https://bugzilla.mozilla.org/show_bug.cgi?id=830765">bug 830765</a>.

Justin Lebar fixed an issue where telemetry memory reporting code was accidentally triggering expensive 'release memory to OS' operations: <a title="Extremely long pause while collecting telemetry information on the main thread" href="https://bugzilla.mozilla.org/show_bug.cgi?id=789975">bug 789975</a>.

###Shutdown
Sometimes Firefox takes a long time to shutdown. We also have a timer that regularly triggers cycle collection. Olli Pettay disabled this timer during shutdown in <a title="Timer based CC occurring on shutdown" href="https://bugzilla.mozilla.org/show_bug.cgi?id=822849">bug 822849</a>.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snappy #48: Now With Faster Shutdown]]></title>
    <link href="http://taras.glek.net/blog/2013/01/10/snappy-number-48-now-with-faster-shutdown/"/>
    <updated>2013-01-10T16:53:00-08:00</updated>
    <id>http://taras.glek.net/blog/2013/01/10/snappy-number-48-now-with-faster-shutdown</id>
    <content type="html"><![CDATA[###Huge Shutdown Improvement
After a couple weeks worth of telemetry data confirmed that Olli Pettay sped up shutdown by an epic >=30%: <a title="Don't run CC during shutdown" href="https://bugzilla.mozilla.org/show_bug.cgi?id=818739">bug 818739</a>, [telemetry link](http://tinyurl.com/abo6uek).


###Memory Management
Olli and Andrew McCreight continued with reducing CC pauses:

* <a title="Try to postpone triggering CC if we're in middle of GC handling" href="https://bugzilla.mozilla.org/show_bug.cgi?id=820378">bug 820378</a>: Delay CC if we're in the middle of a GC, to allow async CC prep
* <a title="Improve CanSkipWrappedJS" href="https://bugzilla.mozilla.org/show_bug.cgi?id=827471">bug 827471</a>: Remove more wrapped JS from the CC graph
* <a title="[CC] don't add JSContexts that have no children to the cycle collector graph" href="https://bugzilla.mozilla.org/show_bug.cgi?id=705371">bug 705371</a>: Remove pointless JSContexts from the CC graph
* <a title="Mark the script of live nsXULPrototypeScript black during GC" href="https://bugzilla.mozilla.org/show_bug.cgi?id=785493">bug 785493</a>: Reduce size of steady state cycle collector graph by about 80%
* <a title="Add telemetry for prep work done for cycle collection" href="https://bugzilla.mozilla.org/show_bug.cgi?id=821371">bug 821371</a>: Include prep work in cycle collector pause time telemetry

###Misc
Vladan landed <a title="Move LocalStorage writes off the main thread" href="https://bugzilla.mozilla.org/show_bug.cgi?id=807021">bug 807021</a>. Firefox should now handle DOM Local Storage writes without janking.

###Startup
David Teller made search service metadata loading/migration async: <a title="nsIBrowserSearchService should load metadata asynchronously" href="https://bugzilla.mozilla.org/show_bug.cgi?id=760036">bug 760036</a>. David also made session-store loading async: <a title="session file should be read on a background thread" href="https://bugzilla.mozilla.org/show_bug.cgi?id=532150">bug 532150</a>.

Aaron Klotz landed a telemetry probe to measure how often the 'Firefox is running but not responding' dialog is encountered on attempted startup: <a title="telemetry on what proportion of attempted firefox startups result in 'firefox is running and not responding'" href="https://bugzilla.mozilla.org/show_bug.cgi?id=815418">bug 815418</a>. This will help us decide on whether (or when) to add functionality to kill unresponsive Firefox instances. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snappy: 2012 Summary]]></title>
    <link href="http://taras.glek.net/blog/2013/01/04/snappy-2012-summary/"/>
    <updated>2013-01-04T15:46:00-08:00</updated>
    <id>http://taras.glek.net/blog/2013/01/04/snappy-2012-summary</id>
    <content type="html"><![CDATA[2012 was an exciting year for Snappy. Turning 'make it go faster' into a set of measurements and corresponding bugs to fix was hard. We learned a lot.

I'd like to summarize some of the most memorable Snappy accomplishments.

*Short version: Firefox is much more reponsive now.*

<!-- more -->

#Snappy Tools

Much of the year was spent on tooling for analyzing Firefox performance. [Gecko profiler](https://addons.mozilla.org/en-us/thunderbird/addon/gecko-profiler/) is my favourite new tool. Telemetry chromehangs, evolution and slowsql are also great for settling arguments. 

Many of the bugs below would not have gotten fixed without these tools.

#Cleaning up the Memory Collectors

In the beginning of the year it was common to suffer long (200-700ms for me) garbage and cycle collection pauses. I now rarely see pauses over 20ms in these areas. I suspect these were the most laborious improvements of 2012: see the huge number of blocking bugs in <a title="Incremental GC" href="https://bugzilla.mozilla.org/show_bug.cgi?id=641025">bug 641025</a>, <a title="[meta] Don't add obviously live objects to the cycle collector graph" href="https://bugzilla.mozilla.org/show_bug.cgi?id=716598">bug 716598</a>. 

#SQLite Misuse

SQLite is a fine database, but it is much better at storing data robustly than accessing it efficiently. Firefox got nailed by the following footguns:

- overusing main-thread SQL queries
- performing expensive background queries
 
As if main-thread IO wasn't bad enough, turns out SQLite does not like running queries in parallel. Mixing sync/async queries invites race conditions where sync queries can end up waiting for many minutes at a time (hanging the UI) while "background" maintenance queries complete. There were too many such fixes to list.

###DOM Local Storage Caching

We ran into significant problems with Local Storage. In order conform to spec and not perform poorly, browsers are forced to maintain an in-memory cache (this is why Local Storage dominates in synthetic benchmarks: they are measuring memory bandwidth with no syscall, etc overhead).

* It became really popular in 2011-2012 despite a poor spec: main-thread reads and vagueness on when/whether data should hit disk.
* Local Storage cache was causing LS to be written out too often: <a title="Reduce writes in current DOM Storage implementation" href="https://bugzilla.mozilla.org/show_bug.cgi?id=714964">bug 714964</a>
* Local Storage cache was written on main-thread. For paranoid amusement it was then read back in after every writeout: <a title="Move LocalStorage writes off the main thread" href="https://bugzilla.mozilla.org/show_bug.cgi?id=807021">bug 807021</a>
* For some some reason to do with how our DOM works there is a second level of caching so local storage can actually use up 2x more memory in RAM than it does on disk. As a result the Local Storage cache is slated for a complete rewrite in <a title="Rewrite and cleanup DOMStorage code" href="https://bugzilla.mozilla.org/show_bug.cgi?id=600307">bug 600307</a>.

I should note, I made a mistake and attributed [too much blame](/blog/2012/02/22/psa-dom-local-storage-considered-harmful/) to the Local Storage API. I will blog on the exact extent of Local Storage badness once I have a chance to access the relevant telemetry data.

Surprisingly, the Local Storage caching layer was so bad that the underlying SQLite footguns did not get to play a role in this tragedy.

#Async IO

For years people would argue on how patches should strive to use async APIs during patch review. Unfortunately even a little bit of sync IO has potential to cancel out the most elaborate async efforts.

We had no purely async storage APIs until recently. We now have one such API in [OS.File](http://dutherenverseauborddelatable.wordpress.com/2012/10/03/asynchronous-file-io-for-the-mozilla-platform/).


#UI Slowness

The following sadness was fixed:

###Startup

* Renaming directories with lots of files can take minutes on Windows: bad when it happens on startup: <a title="Disk cache seems to cause exceptionally slow startups(1min+)" href="https://bugzilla.mozilla.org/show_bug.cgi?id=701909">bug 701909</a>.
* Firefox had a minor tendency to start loading webpages before UI is shown: <a title="Don't load homepage URI before first paint" href="https://bugzilla.mozilla.org/show_bug.cgi?id=756313">bug 756313</a>, <a title="Wait until chrome is painted before executing code not critical to making the initial window visible" href="https://bugzilla.mozilla.org/show_bug.cgi?id=715402">bug 715402</a>.
* Q: What could be worse than loading pages before UI is shown? A: Executing synchronous proxy code: <a title="windows proxy discovery via WPAD needs caching" href="https://bugzilla.mozilla.org/show_bug.cgi?id=790370">bug 790370</a>, <a title="remove synchronous DNS resolution in nsSOCKSIOLayer.cpp" href="https://bugzilla.mozilla.org/show_bug.cgi?id=767159">bug 767159</a>
* Firefox insisted on doing network activity to verify some extension jars on startup: <a title="Certificate of a signed extension is validated on each startup" href="https://bugzilla.mozilla.org/show_bug.cgi?id=726125">bug 726125</a>

###General

* Tab switching to some popular websites is roughly 10x faster now (too many bugs to list).
* Firefox tended be unresponsive during large downloads: <a title="nsExternalAppHandler downloads files on the main thread" href="https://bugzilla.mozilla.org/show_bug.cgi?id=789932">bug 789932</a>.
* In some situations hardware acceleration would slow down Firefox UI to a crawl: too many bugs to list here.

#2013

2012 was a good warm-up. We spent a substantial part of the year on tooling. If everything goes right, that should pay off in the coming year.
]]></content>
  </entry>
  
</feed>
