<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pork | All About Performance]]></title>
  <link href="http://taras.glek.net/blog/categories/pork/atom.xml" rel="self"/>
  <link href="http://taras.glek.net/"/>
  <updated>2013-01-21T13:19:42-08:00</updated>
  <id>http://taras.glek.net/</id>
  <author>
    <name><![CDATA[Taras Glek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Month In Static Analysis]]></title>
    <link href="http://taras.glek.net/blog/2009/08/03/this-month-in-static-analysis/"/>
    <updated>2009-08-03T14:19:55-07:00</updated>
    <id>http://taras.glek.net/blog/2009/08/03/this-month-in-static-analysis</id>
    <content type="html"><![CDATA[Lately I have been focusing on optimizing Fennec startup on a delightfully inadequate platform: Windows Mobile. More on fascinating startup, performance problems and solutions later. As a result I have been doing relatively little static analysis stuff.  
  
The main reason for taking a break is that I feel that I went from having no way to do any analysis to having production-quality tools for [analysis](https://developer.mozilla.org/En/Dehydra) and [rewriting](https://developer.mozilla.org/En/Pork).  I finally have a chance to move on from developing tools to using them in everyday development. The main puzzle piece that needs completion is GCC 4.5 support in Dehydra. We are feature-complete on 4.5, just need to stabilize once the trunk stabilizes.  
  
**Drowning In Pork **  
  
A number of other people did some cool stuff in the meantime. First and foremost: Joshua Cranmer has ventured into the land of [Pork](https://developer.mozilla.org/En/Pork) and is publishing a guide to doing refactoring tools on this blog ([part 1](http://quetzalcoatal.blogspot.com/2009/07/guide-to-pork-part-1.html), [part 2](http://quetzalcoatal.blogspot.com/2009/07/guide-to-pork-part-2.html), [part 3](http://quetzalcoatal.blogspot.com/2009/08/guide-to-pork-part-3.html)). This is cool, because until now, there were no Pork docs and nothing I write could ever match Joshua's documenting talents.  Thanks a bunch, Joshua.  
  
I have also received my first-ever bugfix patches to Elsa. Previously, I've received miscellaneous build fixes, etc, but these are the first patches that involved somebody pounding their head against the wall until they figured out why things were crashing or not accepting valid C++ code.  
  
**Introducing Dan Witte**  
  
Dan is the new static analysis go-to person. So far he facilitated an explosion of static analysis ideas (they are tracked in [bug 430328](https://bugzilla.mozilla.org/show_bug.cgi?id=430328)). A lot of these can be expressed as <10line Dehydra analyses, so they are excellent introductory projects. If you are dying to start analyzing code, but don't know where to begin, look in that bug. Dan has written an interesting analysis to do with finding accidental temporaries due to C++'s "wonderful" implicit conversions/etc (expect to see a blog post on that). He is also working on the holy grail of Mozilla static analysis: a full callgraph. It's a little embarrassing that we don't have that yet, but it's hard and once we do have it, a whole new world of analyses will be possible.  
  
**Speaking of Callgraphs...**  
  
So while various Mozillians were pondering how awesome it would be to do inter-function analysis, an intern has beat us to writing the first useful inter-function analysis! Sully had a problem, after a tiny bit of  Dehydra coaching, he solved his problem in the amount of time it took me to eat my lunch. Brilliant! See his [blog post](http://www.msully.net/blog/2009/08/03/doing-whole-tree-analysis-with-dehydra/) for details. My conclusion: either Dehydra is pretty easy to use and/or we get mad genius interns :).
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dehydra & Pork Sources Moved]]></title>
    <link href="http://taras.glek.net/blog/2009/06/25/dehydra-pork-sources-moved/"/>
    <updated>2009-06-25T08:32:57-07:00</updated>
    <id>http://taras.glek.net/blog/2009/06/25/dehydra-pork-sources-moved</id>
    <content type="html"><![CDATA[I moved dehydra to a more official location, please update your scripts and hg settings. New dehydra url: http://hg.mozilla.org/rewriting-and-analysis/dehydra/  
  
Pork got reshuffled during the move, it's now 2 repositories. oink is dead. It now depends on current versions of flex (as opposed to flex-old) and features a cleaned up buildsystem.  
  
New way to checkout pork: 
```

hg clone http://hg.mozilla.org/rewriting-and-analysis/pork
hg clone http://hg.mozilla.org/rewriting-and-analysis/elsa pork/elsa

```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Semantic Rewriting of Code with Pork - A bitter recap]]></title>
    <link href="http://taras.glek.net/blog/2009/01/28/semantic-rewriting-of-code-with-pork-a-bitter-recap/"/>
    <updated>2009-01-28T16:17:47-08:00</updated>
    <id>http://taras.glek.net/blog/2009/01/28/semantic-rewriting-of-code-with-pork-a-bitter-recap</id>
    <content type="html"><![CDATA[LWN [published](http://lwn.net/Articles/315686/) an article about a tool that does refactoring of C code. Guess what, it's yet another tool on top of a crappy C-parser that will never grok C well or even hope to support C++. To my great disappointment the author was not aware of my work on Pork. Clearly I have failed in letting people know that complex C and C++ can be refactored with (somewhat raw, but powerful) open source tools.  
  
In addition to [Dehydra](https://developer.mozilla.org/En/Dehydra) (which is even mentioned in the first comment, yay!), I also maintain [Pork](https://developer.mozilla.org/En/Pork) - a fork of oink that is well suited to large-scale refactoring of real-world C/C++ code.  
  
So far pork has been used for "minor" things like renaming classes&functions, rotating [outparameters](http://taras.glek.net/blog/2007/08/06/outparams-take-2/) and correcting [prbool](http://taras.glek.net/blog/2007/06/26/status-report-recent-work/) bugs. Additionally, Pork proved itself in an [experiment](http://taras.glek.net/blog/2007/11/02/garburator-works/#comments) which involved rewriting almost every function(ie generating a 3+MB patch) in Mozilla to use garbage collection instead of reference-counting.  
  
So to summarize: 

  * Refactoring C is hard, but C++ is much harder
  * For refactoring C++ there is no better toolchain to start with than Pork
  * Pork shares no code with Dehydra.
  * Pork is built on the Elsa parser which makes it well-suited for rewriting large amounts of code. Dehydra's isn't suitable for rewriting code due to GCC providing a very lossy AST and incomplete location information.
  * Pork is not as convenient for analysis needs as Dehydra
For any questions regarding Pork feel free to post on the [mailing list](https://lists.mozilla.org/listinfo/dev-static-analysis) or ping me on IRC.  
  
**Language Wars**  
  
I find it depressing that the comments to the LWN article ended up being about language wars rather than the refactoring topic. Pork is written in C++ which is much more widely known than OCaml. However, I seriously doubt it's easier for anyone to hack on advanced compiler frontend pieces in a language as ill-suited for the task as C++.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Converging Elsa Strains]]></title>
    <link href="http://taras.glek.net/blog/2008/09/02/converging-elsa-strains/"/>
    <updated>2008-09-02T01:39:45-07:00</updated>
    <id>http://taras.glek.net/blog/2008/09/02/converging-elsa-strains</id>
    <content type="html"><![CDATA[One of the purposes of this blog is to inform people that while the original [Elsa author](http://www.cs.berkeley.edu/~smcpeak/elkhound/) is no longer actively developing it, Elsa is being used in production at Mozilla and is actively maintained within [Pork](http://developer.mozilla.org/en/docs/Pork).  
  
Recently two previously unknown to me Elsa forks have come to my attention via comments on my blog. Both of these are extrimely cool and something we have been wanting: 

  * [ellcc](http://ellcc.org/) C (and soon C++) compiler via Elsa + LLVM. I've heard of attempts to get this to work before, but this looks like it is much further along than similar efforts.
  * Alex Telia's souped up elsa with parser error recovery and an integrated C preprocessor among other awesomeness. See [this comment](http://taras.glek.net/blog/2008/06/30/pork-09-in-the-wild/#comment-18303) for more details. Some of [these tools](http://www.win.tue.nl/~lvoinea/VCN.html) are built on this Elsa fork.
Both of these projects are interested in converging on a single codebase. It sounds like Alex's work will be ready for merging soon.  
  
I love open source.  
  
**I'm Back** ![](http://photos-e.ak.facebook.com/photos-ak-sf2p/v323/152/124/53600064/s53600064_30661500_3965.jpg) Some might've noticed that I disappeared off the net for two weeks. I have a good excuse: I was getting married.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meanwhile in a parallel universe]]></title>
    <link href="http://taras.glek.net/blog/2008/08/14/meanwhile-in-a-parallel-universe/"/>
    <updated>2008-08-14T01:48:04-07:00</updated>
    <id>http://taras.glek.net/blog/2008/08/14/meanwhile-in-a-parallel-universe</id>
    <content type="html"><![CDATA[Someone else is developing their own app-specific rewrite tools. In this case app-specific refers to [automating porting code](http://people.imendio.com/richard/gtk-rewriter/) from gtk2 to gtk3. The approach is similar in that patches are produced, but it doesn't look like a patch aggregating tool is written yet. Instead of the elsa/mcpp magic sauce, [clang](http://clang.llvm.org/) is being used, so this is limited to C at the moment.  
  
KDE folks are behind in automated code rewrites arms race, perhaps the trolls should try some [pork](http://developer.mozilla.org/en/docs/Pork) to accelerate KDE3->4 transition :)  
  
All kidding aside, it is awesome to see that less-manual-labour-through-compiler-assisted-refactoring approach is gaining mindshare.
]]></content>
  </entry>
  
</feed>
