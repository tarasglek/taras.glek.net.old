<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: snappy | All About Performance]]></title>
  <link href="http://taras.glek.net/blog/categories/snappy/atom.xml" rel="self"/>
  <link href="http://taras.glek.net/"/>
  <updated>2013-03-27T04:03:33-07:00</updated>
  <id>http://taras.glek.net/</id>
  <author>
    <name><![CDATA[Taras Glek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Snappy #55: Snappy Evolution]]></title>
    <link href="http://taras.glek.net/blog/2013/03/27/snappy-number-55-snappy-evolution/"/>
    <updated>2013-03-27T03:56:00-07:00</updated>
    <id>http://taras.glek.net/blog/2013/03/27/snappy-number-55-snappy-evolution</id>
    <content type="html"><![CDATA[The Snappy name will be retired in favor of Performance: we will be expanding our meta scope beyond desktop Firefox responsiveness.

I think as a result of Snappy, Firefox is in a much happier performance place now. There are a big wins remaining, but we have tools and ideas on how to get there. We've come a long way from "how to make Firefox feel fast?" discussions in late 2011.

Snappy has been a tricky meta-project because work has to happen across teams. While my Performance team has an exclusive commitment to performance, other teams have to context-switch between feature-work, platform-work, performance, etc. There are also team culture differences on internal vs external communication, planning, etc.

Some of the projects are quite hard and require specialized expertise. This meant that we'd make a bunch of progress on a project (eg breakpad profiler backend) only to realize that we are blocked on someone we didn't loop into the project right away (eg Ted). Ideally we will minimize chances of surprises like this in the future.

Until recently my solution was to deal with this as a manager. I'd sync up with relevant managers about Snappy needs and try to get some Snappy bugs onto relevant team's todo. This has worked out ok, but there were a few too many instances of unexpected delays due to shifting team priorities, miscommunication, general lag. My conclusion is that at a developer-driven organization like Mozilla heavy manager involvement on Snappy-type projects is a sign that we are doing it wrong. Developers should be adding performance goals to their team's agenda.

Last week we came up with a more developer-centric way to do performance work. I'll still be around making sure things are moving forward, but from now one I'd like to see developers drive planning & coordination on a per-project basis. I'll introduce individual projects + their respective blogs as they start in the next couple of weeks.

Irving Reid (addon-manager startup performance lead) summed up key mechanics of the new approach in an email. Thanks, Irving.

###Irving's Summary

Coming out of the Snappy work week, we decided to try and make performance projects a little more structured than they have been in the past; see [Lawrence's post](http://lawrencemandel.com/2013/03/21/no-more-snappy-meetings-and-other-changes-from-the-snappy-team/) for a summary.

While not mentioned in Lawrence's blog, one of the things Taras (if I recall correctly) suggested was to have a project kick-off meeting to get rough agreement on scope, responsibilities, and how we're going to track progress. If everyone is happy with settling those questions over email, we can; I think we lose a little by not getting a chance to see and hear each other directly, but it is rather painful to get that scheduled in the current circumstances.

In any case I wasn't planning on delaying work until after the meeting could happen; it's more about getting things as clear as we can, as early as we can.

The current plan is for Felipe and I to do the patches, with me handling coordination and progress tracking as well. Everybody else is involved to make sure we're going in the right direction, and help us over roadblocks.

The progress tracking technique the Snappy team settled on last week was a combination of daily one-line updates using the [status bot](http://teamstat.us/#browse/irc.mozilla.org/perf) in the #perf channel, and a blog post every two weeks summarizing overall progress. I'll do the [blog posts](http://www.controlledflight.ca/category/mozilla/); depending on how things go I may do them weekly instead of biweekly.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snappy #54: Snappy Discussion in Paris]]></title>
    <link href="http://taras.glek.net/blog/2013/03/26/snappy-number-54-snappy-discussion-in-paris/"/>
    <updated>2013-03-26T04:16:00-07:00</updated>
    <id>http://taras.glek.net/blog/2013/03/26/snappy-number-54-snappy-discussion-in-paris</id>
    <content type="html"><![CDATA[###Meeting In Paris
Last week Snappy people met in Paris at [IRILL](http://www.irill.org/about). I like small venues because they encourage conversations. IRILL is one of the best small work venues I've attended.

Excellent Parisian food did not hurt :)

###Workweek Presentations

I was impressed by the number and quality of presentations this time. I suspect having a presentation-friendly venue helped.

Talks/discussions/notes (please leave a comment if I missed a talk):

* Gabriele Svelto: [Firefox OS Performance](http://people.mozilla.org/~tglek/paris2013/b2g_slides.pdf)
* Benoit Girard: [profiler improvements](http://benoitgirard.wordpress.com/2013/03/25/profiler-snappy-work-week/)
* Nathan Froyd + Avi Halachmi: [Talos flaws + improvements to focus on](http://blog.mozilla.org/nfroyd/2013/03/25/perf-workweek-talos-discussion/)
* Nathan Froyd: [How Firefox Makes Your JavaScript Run Fast](http://people.mozilla.com/~nfroyd/paris-workweek-2013/)
* Julian Seward: [Stack unwinding for Gecko Profiler](http://people.mozilla.org/~tglek/paris2013/sps_breakpad.pdf)
* Julian Seward: ['Harmless' data races in Gecko](http://people.mozilla.org/~tglek/paris2013/data_races.pdf)
* Marco: [SQLite pitfalls](http://mozilla.bonardo.net/paris2013/)
* Vladan Djeric: [Firefox startup analysis](http://people.mozilla.com/~vdjeric/perfweek_paris2013/)
* Vladan Djeric: [Chromehang prioritization etherpad](https://etherpad.mozilla.org/chromehangsMarch)
* Vladan Djeric: [Flash-caused hangs whiteboard](http://people.mozilla.com/~vdjeric/flashDiscussionDiagram.JPG)
* Jet: Shumway Demo
* David Teller: Introduction to Promises, Task.jsm
* Lawrence Mandel: Discussion on how to accomplish reviews faster. Lawrence will [blog](http://lawrencemandel.com/) notes on this soon.
* Taras Glek + Lawrence Mandel: [Improving coordination + focus](http://lawrencemandel.com/2013/03/21/no-more-snappy-meetings-and-other-changes-from-the-snappy-team/)
* Taras Glek: [Telemetry reboot plan + doing hadoop map/reduce in python](http://people.mozilla.org/~tglek/pydoop2013/)


###Team Activity

For a team activity we walked to the [Paris Catacombes](http://en.wikipedia.org/wiki/Catacombs_of_Paris). 

<img src="https://lh6.googleusercontent.com/-dUluprOFvY0/UUoRsBAC1oI/AAAAAAAAIj8/WjOYb7uHij4/s580/20130320_123837.jpg" title="Relevance to writing software? Multi-million line codebases are boneyards of some kind" >


]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[snappy #53: Faster: Startup, Image Decoding, Touchpad Input. Smoother Animations]]></title>
    <link href="http://taras.glek.net/blog/2013/03/25/snappy-number-53-faster-startup/"/>
    <updated>2013-03-25T06:25:00-07:00</updated>
    <id>http://taras.glek.net/blog/2013/03/25/snappy-number-53-faster-startup</id>
    <content type="html"><![CDATA[### Responsiveness

Joe Drew taught Firefox to decode images on multiple threads. It took a mere 29 patches in <a title="Multithreaded image decoding" href="https://bugzilla.mozilla.org/show_bug.cgi?id=716140">bug 716140</a>. This should speed up page-load and improve tab-switch times. This task was considered too hard a year ago when Snappy people were discussing potential improvements.

Masayuki Nakano improved Firefox scrolling responsiveness on modern touchpads in <a title="Scrolling using some high-resolution-scroll aware touchpads feels slow" href="https://bugzilla.mozilla.org/show_bug.cgi?id=829952">bug 829952</a>. Dealing with scroll-events on Windows is a mess. It's nice when we make forward progress in this area.


Marco Bonardo fixed a mysterious cause of main thread IO I ran into in <a title="Avoid repeated execution of expensive daysOfHistory query" href="https://bugzilla.mozilla.org/show_bug.cgi?id=830423">bug 830423</a>. I ran into this issue because I compulsively navigate to `about:telemetry` in Firefox and look in 'Slow SQL Statements' and 'Browser Hang' sections. I encourage readers of this blog to check out that data whenever Firefox is under-performing.

### Startup

<a title="Use readahead for ordered jar files such as omni.ja. Should be ~10% startup speedup" href="https://bugzilla.mozilla.org/show_bug.cgi?id=810151">bug 810151</a> + <a title="Use fadvise() to speed up cookie db load" href="https://bugzilla.mozilla.org/show_bug.cgi?id=810454">bug 810454</a> - Aaron Klotz implemented omnijar + cookie readahead.

<a title="Fold NSPR and NSS into mozjs (for Windows) or libxul (for other platforms)" href="https://bugzilla.mozilla.org/show_bug.cgi?id=648407">bug 648407</a> - Mike Hommey folded libraries for faster startup. If I'm reading <a title="Update removed-files after bug 648407" href="https://bugzilla.mozilla.org/show_bug.cgi?id=852068">bug 852068</a> correctly, Firefox now loads 7 fewer libraries on startup. My rough rule of thumb is that each (small) file adds ~30ms to spinning-disk startup so this should net >200ms in startup savings.

Cumulative startup improvements are notoriously difficult to predict + measure, but I suspect that above changes should make for a >=10% speedup in Firefox 22 start over previous releases. We'll be watching telemetry data in the coming weeks.

###Smoothness
<a title="Consider getting rid of the delay line filter stuff in timer thread" href="https://bugzilla.mozilla.org/show_bug.cgi?id=590422">bug 590422</a> - Avi Halachmi is continuing on his quest to make Firefox animate smoothly. This is another tricky step towards smoother animations in Firefox. Since landing this, Avi already embarked on the next gecko-level animation smoothness improvement.

Marco Bonardo spotted some potential for contention in recent DOM Local Storage optimizations. Vladan Djeric landed corrections in <a title="LocalStorage performance improvements" href="https://bugzilla.mozilla.org/show_bug.cgi?id=842852">bug 842852</a>.

###Throughput improvements

Ehsan Akhgari reduced allocator contention in <a title="Prevent firing timers from lock contention with the main thread" href="https://bugzilla.mozilla.org/show_bug.cgi?id=733277">bug 733277</a>.

Tim Taubert taught Firefox to warm up newtab connections on hover <a title="[New Tab Page] Speculatively open connections for sites when hovering them" href="https://bugzilla.mozilla.org/show_bug.cgi?id=790882">bug 790882</a>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snappy #52]]></title>
    <link href="http://taras.glek.net/blog/2013/03/08/snappy-number-52/"/>
    <updated>2013-03-08T16:58:00-08:00</updated>
    <id>http://taras.glek.net/blog/2013/03/08/snappy-number-52</id>
    <content type="html"><![CDATA[###Frontend

####Help-Wanted:

Avi Halachmi [needs your help](http://avih.github.com/blog/2013/02/28/slow-touchpad-scroll-in-firefox/) comparing scrolling behavior between browsers.

####Australis

Mike Conley [blogged](http://mikeconley.ca/blog/2013/03/01/australis-curvy-tabs-more-progress/) that Australis performance is now on-par with current theme on low-end hardware.


###Startup

Aaron Klotz landed <a title="Generic readahead functions" href="https://bugzilla.mozilla.org/show_bug.cgi?id=845907">bug 845907</a>. This gives us a consistent way to warm IO caches. This functionality can easily backfire if we end preloading data that does not get used. Uses of readahead should always be accompanied with telemetry to verify it performs as expected. <a title="Use fadvise() to speed up cookie db load" href="https://bugzilla.mozilla.org/show_bug.cgi?id=810454">Bug 810454</a> is the first user of readahead API, it landed with A/B testing telemetry.
Omnijar readhead is next, in <a title="Use readahead for ordered jar files such as omni.ja. Should be ~10% startup speedup" href="https://bugzilla.mozilla.org/show_bug.cgi?id=810151">bug 810151</a>. It results in ~60% drop in omni.ja startup read time on Windows on Aaron's machine.

 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snappy #51: Smoothing Tab Animations]]></title>
    <link href="http://taras.glek.net/blog/2013/02/22/snappy-number-51-smoothing-tab-animations/"/>
    <updated>2013-02-22T16:14:00-08:00</updated>
    <id>http://taras.glek.net/blog/2013/02/22/snappy-number-51-smoothing-tab-animations</id>
    <content type="html"><![CDATA[###Lack of Updates

I skipped a Snappy update two-weeks ago (did anyone notice?) due to not having any completed work to report. Snappy has not stagnated, we have big projects inflight see this week's [notes](https://wiki.mozilla.org/Performance/Snappy/2013-02-21) for some details.

###Tab Smoothness

I usually do not cover in-flight work in Snappy updates and expect individual developers to blog about stuff they are working on. However, Avi Halachmi has delayed blogging to focus on quickly advancing Firefox performance, an exception had to me made.

Avi has been investigating tab smoothness since December. His approach relies on detailed instrumentation + sending captured data via Telemetry. This culminated in some exciting bug activity this week:

* <a title="Add telemetry probes for tab animation smoothness" href="https://bugzilla.mozilla.org/show_bug.cgi?id=828097">bug 828097</a> According to Telemetry, Firefox tab animations are quite smooth (due to recent improvements like <a title="requestAnimationFrame generates too short/long frames, especially at the beginning of animation" href="https://bugzilla.mozilla.org/show_bug.cgi?id=731974">bug 731974</a>) iff one has the newtab thumbnail feature disabled (via button in top right of the page).
* <a title="Newtab page slows down tab-open animation" href="https://bugzilla.mozilla.org/show_bug.cgi?id=843853">bug 843853</a> was filed to fix above performance hit ASAP.
* <a title="Cache GradientStops instead of gfxPatterns" href="https://bugzilla.mozilla.org/show_bug.cgi?id=838758">bug 838758</a> 20-25% tab animation speedup on Direct2D-accelerated systems.
* <a title="Refresh driver may re-target the same timestamp" href="https://bugzilla.mozilla.org/show_bug.cgi?id=842967">bug 842967</a>, <a title="Consider getting rid of the delay line filter stuff in timer thread" href="https://bugzilla.mozilla.org/show_bug.cgi?id=590422">bug 590422</a> improve animation scheduling.

Due to web-like Firefox UI architecture most of these improvements will enable smoother website perf.

Avi, Matthew Noorenberghe, Mike Conley are working on optimizing our next UI refresh: Australis. Australis is shaping up to be the most perf-tuned theme update we've done. See <a title="Australis tabs performance tracking" href="https://bugzilla.mozilla.org/show_bug.cgi?id=837885">bug 837885</a> for how performance is being tracked.

As Avi's manager I found it trying to see weeks of perf-reporting work with no fixes to accompany it. I'm happy to see this investigation investment pay off and serve an example of importance of methodically studying performance before proceeding to optimization.
]]></content>
  </entry>
  
</feed>
