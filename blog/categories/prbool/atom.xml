<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: prbool | All About Performance]]></title>
  <link href="http://taras.glek.net/blog/categories/prbool/atom.xml" rel="self"/>
  <link href="http://taras.glek.net/"/>
  <updated>2013-02-17T20:46:54-08:00</updated>
  <id>http://taras.glek.net/</id>
  <author>
    <name><![CDATA[Taras Glek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Semantic Rewriting of Code with Pork - A bitter recap]]></title>
    <link href="http://taras.glek.net/blog/2009/01/28/semantic-rewriting-of-code-with-pork-a-bitter-recap/"/>
    <updated>2009-01-28T16:17:47-08:00</updated>
    <id>http://taras.glek.net/blog/2009/01/28/semantic-rewriting-of-code-with-pork-a-bitter-recap</id>
    <content type="html"><![CDATA[LWN [published](http://lwn.net/Articles/315686/) an article about a tool that does refactoring of C code. Guess what, it's yet another tool on top of a crappy C-parser that will never grok C well or even hope to support C++. To my great disappointment the author was not aware of my work on Pork. Clearly I have failed in letting people know that complex C and C++ can be refactored with (somewhat raw, but powerful) open source tools.  
  
In addition to [Dehydra](https://developer.mozilla.org/En/Dehydra) (which is even mentioned in the first comment, yay!), I also maintain [Pork](https://developer.mozilla.org/En/Pork) - a fork of oink that is well suited to large-scale refactoring of real-world C/C++ code.  
  
So far pork has been used for "minor" things like renaming classes&functions, rotating [outparameters](http://taras.glek.net/blog/2007/08/06/outparams-take-2/) and correcting [prbool](http://taras.glek.net/blog/2007/06/26/status-report-recent-work/) bugs. Additionally, Pork proved itself in an [experiment](http://taras.glek.net/blog/2007/11/02/garburator-works/#comments) which involved rewriting almost every function(ie generating a 3+MB patch) in Mozilla to use garbage collection instead of reference-counting.  
  
So to summarize: 

  * Refactoring C is hard, but C++ is much harder
  * For refactoring C++ there is no better toolchain to start with than Pork
  * Pork shares no code with Dehydra.
  * Pork is built on the Elsa parser which makes it well-suited for rewriting large amounts of code. Dehydra's isn't suitable for rewriting code due to GCC providing a very lossy AST and incomplete location information.
  * Pork is not as convenient for analysis needs as Dehydra
For any questions regarding Pork feel free to post on the [mailing list](https://lists.mozilla.org/listinfo/dev-static-analysis) or ping me on IRC.  
  
**Language Wars**  
  
I find it depressing that the comments to the LWN article ended up being about language wars rather than the refactoring topic. Pork is written in C++ which is much more widely known than OCaml. However, I seriously doubt it's easier for anyone to hack on advanced compiler frontend pieces in a language as ill-suited for the task as C++.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling prcheck email notifications]]></title>
    <link href="http://taras.glek.net/blog/2008/11/07/enabling-prcheck-email-notifications/"/>
    <updated>2008-11-07T07:58:08-08:00</updated>
    <id>http://taras.glek.net/blog/2008/11/07/enabling-prcheck-email-notifications</id>
    <content type="html"><![CDATA[I've been running my prbool checker with nightly notifications for about a year now. There are some false positivies, but mostly it picks up real bugs. The checker pulls the blame source to try to guess who is responsible for the error, but so far it has only been emailing me.  
  
I'm going to make it emailed the hg blamed person starting this weekend, so if you commit something and get an email from me complaining about it don't take it too personally. Hopefully this will keep the amount of new detectable prbool bugs at 0. If you do get an email and decide you don't want to get these in the future, please complain and we'll try to come up with a better notification solution.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Outparamdelling this way comes]]></title>
    <link href="http://taras.glek.net/blog/2008/09/19/outparamdelling-this-way-comes/"/>
    <updated>2008-09-19T07:06:08-07:00</updated>
    <id>http://taras.glek.net/blog/2008/09/19/outparamdelling-this-way-comes</id>
    <content type="html"><![CDATA[Recently I dusted off outparamdel to see if I can get some refactorings landed. About a year ago, with the great QueryInterface outparamdelling experiment we ended up with a smaller binary footprint and tiny performance gain, but that never landed due to us not wanting to break compatability yet. Ever since, outparamdel has been patiently bitrotting within [Pork](http://developer.mozilla.org/en/docs/Pork) waiting for the day it's allowed to break APIs.  
  
Recently jst [listed](http://wiki.mozilla.org/Gecko:DeCOMtamination) some private API candidates for deCOMtamination and I have been letting outparamdel loose on them for the past week. So far only one such [change](http://hg.mozilla.org/mozilla-central/raw-rev/ec4733eb1bd8) has been committed, the rest are sitting in jst's review queue. It's exciting, as it's the first ever application of outparamdel that didn't get canned. For the whole list see the most recent bugs blocking my [analysis metabug](https://bugzilla.mozilla.org/show_bug.cgi?id=430328).  
  
Cool part about these patches is that after various outparamdel special-casing and manual cleanup the line count is reduced by 10-30% while maintaining existing functionality!  
  
So far I haven't touched much outside of content/, so if you know of any APIs that could have the outparam rotated into the return value, file some rewriting bugs against me.  
  
**Rewriting with Mercurial**  
  
Mercurial is now my favourite python program ever. It makes rewrites so easy. Here is my typical workflow:  
  

```

# Write an outparamdel input file specifying functions to rewrite..run outparamdel with pork-barrel to generate patch
hg qimport -f autopatch.diff && hg qpush && hg qref #make the patch nice and readable
hg qnew manual.diff #create a manual cleanup patch for cosmetic touchups and rewrites screwed up by macros#of course to submit patch for review, those two patches need to be combined
#do manual stuff
hg diff -r 19277 #produce a combined diff without loosing ability to edit each applied patch individually! For example, can regenerate the autopatch.diff with different outparamdel parameters or a bugfixed outparamdel. 19277 is a revision that has to be looked up with hg log, unfortunately there isn't a relative syntax to do hg diff -r "tip - 2"

```
This is a huge improvement over the ad-hoc workflow prior to hg switch when I was prototyping my tools. CVS + quilt don't hold a candle to a modern revision control system.  
  
**Prcheck**  
  
I also have been doing another round of [prbool corrections](https://bugzilla.mozilla.org/show_bug.cgi?id=266048). Somehow I didn't notice that the system stopped working due to the CVS->hg switch. Once again when reviving my nightly checker scripts, it was a pleasure to substitute all of the CVS hacks with mercurial commands.  
  
I am waiting for the few remaining largeish (ie 3-4 bugs per file) patches to land before I can start submitting whackamole bugs with a single prbool correction per module.  
  
It also seems that cairo and every other pre-C99 project have the same set of issues as Mozilla with their typedefed-int boolean types. Perhaps prcheck isn't mozilla-specific at all.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Degrees of Correctness]]></title>
    <link href="http://taras.glek.net/blog/2007/10/04/multiple-degrees-of-correctness/"/>
    <updated>2007-10-04T10:05:05-07:00</updated>
    <id>http://taras.glek.net/blog/2007/10/04/multiple-degrees-of-correctness</id>
    <content type="html"><![CDATA[**Prcheck**  
  
The trouble with prcheck and the automated [prbool validation](http://taras.glek.net/blog/2007/06/26/status-report-recent-work/) is that one can't attach the giant patch it produces to bugzilla and expect it to get committed. So I am spending this week combing through prcheck outputÂ  and patch-bombing bugzilla with per-module patches.  
  
I find going through the errors manually to be a lot of fun than I expected. I am finding types of errors that I was not considering when I was writing prcheck. For example, I expected the biggest gains to come at runtime from making all prbool values 0/1, but it seems that most of the cool errors are due to PRBool & PRInt32 resolving to the same type. That results in code mayhem ranging from wrong method overloads being called to method signatures claiming to return PRBool where method bodies act like the function returns nsresults.  
  
The prbool check is just an incredibly minor restriction of the C++ system, yet it resulted in hundreds of errors(almost all of which are typos). In my mind this reinforces the importance of static typing (which C++ doesn't do enough of).  
  
The main lesson I learned today is that [code](https://bugzilla.mozilla.org/show_bug.cgi?id=398624) doesn't have to be correct in order to work correctly.  
  
**Mobile**  
  
While on vacation in Ukraine I finally got to try out GPRS Internet through my cellphone. Sure EDGE is slow, but the convenience of having internet everywhere I go while traveling is unparalleled. It's just too bad that I had to go to a developing country to be able to afford mobile internet. In Canada I would've paid over $750 for the $10 worth of Internet in Ukraine. So I am very excited that governments are starting to regulate mobile pricing. Looks like [EU is first](http://news.yahoo.com/s/afp/20071004/bs_afp/eutelecommobilesectorregulateconsumer). I hope the [local](http://telus.ca) [cellular](http://www.rogers.com) [oligopoly](http://bell.ca/home/) gets a kick to the head soon.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Superity Complex & Static Analysis]]></title>
    <link href="http://taras.glek.net/blog/2007/07/27/superity-complex-static-analysis/"/>
    <updated>2007-07-27T07:57:23-07:00</updated>
    <id>http://taras.glek.net/blog/2007/07/27/superity-complex-static-analysis</id>
    <content type="html"><![CDATA[It is always frustrating to see a compiler complain about something trivial. It is especially annoying since most of the trivial complaints are trivial to fix automatically (eg. superfluous semicolon).  
  
I think this is a bigger problem in the static analysis industry. Vendors/researchers ship their tools with a superiority complex built-in. Most of the error messages produced by error checking tools can be paraphrased as "Gee look, I found some trivial to fix bugs in your code, but I ain't gonna do nothing about them! Neeener! Go worker-human!"  
  
My policy is to make my tools more polite than that. Starting from prcheck, all of my tools will point out simple errors by suggesting patches (when possible). It is impossible to produce a correct patch every time, but I am not worried about that since developers are quite good at disregarding stupid suggestions.  
  
**Automatic Whining**  
  
Now I have a few extra scripts that lay the foundation for regular code inspection via static analysis. PRBool checks are my first step. Here is a sample email: 
```

```

    
    
    Subject: Prbool violation in nsPlainTextSerializer.cpp
    
    vidur@netscape.com introduced a new PRBool problem in revision 1.1 of nsPlainTextSerializer.cpp.
    
    Commit message: branches:  1.1.2;  
      
    Error: /content/base/src/nsPlainTextSerializer.cpp: 614:
    
    -          PRInt32 semiOffset = style.Find("ch", widthOffset+6);
    +          PRInt32 semiOffset = style.Find("ch", 0 != (widthOffset+6));

[http://bonsai.mozilla.org/cvsblame.cgi?file=mozilla/content/base/src/nsPlainTextSerializer.cpp&rev=&cvsroot=/cvsroot#614](http://bonsai.mozilla.org/cvsblame.cgi?file=mozilla/content/base/src/nsPlainTextSerializer.cpp&rev=&cvsroot=/cvsroot#614)  
  
This an example of an incorrect suggestion. The actual problem is due to the incorrect method overload being chosen.
]]></content>
  </entry>
  
</feed>
