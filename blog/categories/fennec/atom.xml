<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: fennec | All About Performance]]></title>
  <link href="http://taras.glek.net/blog/categories/fennec/atom.xml" rel="self"/>
  <link href="http://taras.glek.net/"/>
  <updated>2012-12-17T14:25:21-08:00</updated>
  <id>http://taras.glek.net/</id>
  <author>
    <name><![CDATA[Taras Glek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Studying Fennec Performance]]></title>
    <link href="http://taras.glek.net/blog/2009/06/26/studying-fennec-performance/"/>
    <updated>2009-06-26T07:31:36-07:00</updated>
    <id>http://taras.glek.net/blog/2009/06/26/studying-fennec-performance</id>
    <content type="html"><![CDATA[<p>Working on Fennec performance N810 has been very educational. I have been learning more and more about performance profiling on crappy platforms. I define a platform as crap if it has poor development tools, limited OS or other significant limitations. Linux is a crappy platform in this case because it's running on ARM where oprofile barely does anything and there are no other performance tools for N810 (more modern ARM cpus should user-space perf counters and be more useful for instrumentation).</p>

<p><strong>JSD Secret Sauce for JS Optimization</strong></p>

<p>In general there is a misconception that implementing stuff in JavaScript will result in slower code than doing the same in C++. That may be true if the code is implemented in the exact same manner. But in real life the expressiveness and safety of a high-level language like JavaScript permits algorithmic optimizations that would often not be realistic to do in C++ because of time/safety constraints.</p>

<p>So how does one figure out what's slow in JS? timeless suggested that I checkout the JavaScript Debugging API. Using the API and a small hack in spidermonkey(JSD doesn't expose fast dom calls) I was able to hook into chrome code to get a timed trace of JavaScript functions being run.</p>

<p>Once I had a trace it was relatively easy to figure out to "do not call this slow thing all the time" dance (aka optimize code). I collected that work in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=470116">bug 470116</a>. Last I checked there was relatively little room for optimization left on the JS side of Fennec, so then I went to look at what's lurking in C++.</p>

<p>PS. Firebug is a popular consumer of the JSD API for those times when one isn't willing to write JS components to figure out why something is slow.</p>

<p><strong>C++ Is Harder</strong></p>

<p>I've some success with inserting probes into C++ code. I would find interesting code by running oprofile on the desktop (while doing things that I felt were slow on N810). Oprofile would then provide me a callgraph which I would visualize with <a href="http://code.google.com/p/jrfonseca/wiki/Gprof2Dot">this awesome little script</a>. Then I would stick <a href="http://people.mozilla.com/~tglek/fennec/patches/measurer.diff">MeasurerOfTime</a> timing blocks into interesting "hot" code and hope that I would learn something useful.</p>

<p>This got me thinking. Wouldn't it be nice if there existed a JSD for C++? It'd be cool to inspect the C++ callgraph just like one does for JS. It seems like it would help on platforms that aren't gcc and can't inject tracing code via -finstrument-functions. Even -finstrument-functions is of limited use due to the pain of looking up symbols in shared libraries. Stay tuned.</p>

<p><strong>Measuring Progress</strong></p>

<p>The worst part of doing optimizations is knowing that some time in a future an innocent programmer will slightly change some seemingly innocent code and things will no longer happen quickly. Short of policing every single patch by people who previously optimized code in question there is only one thing one can do: performance tests.</p>

<p><a href="http://hg.mozilla.org/users/tglek_mozilla.com/fennecmark">Fennecmark</a> is a benchmark for measuring responsiveness of the Fennec features that I worked on most: panning, zooming and lag during pageload. I <a href="http://taras.glek.net/blog/2009/04/23/benchmarks-and-instrumentation-for-fennecetc/">blogged</a> about it before. Since then Joel Maher has <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=493057">gotten Fennecmark</a> to run automatically and produce results on the graph server. I think we should be logging more numbers (Tpan, Tzoom), but it's an excellent first step in monitoring performance regressions.</p>
]]></content>
  </entry>
  
</feed>
